// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snippet_sample.proto

#include "snippet_sample.pb.h"
#include "snippet_sample.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace StorageEngineInstance {

static const char* StorageEngineInterface_method_names[] = {
  "/StorageEngineInstance.StorageEngineInterface/OffloadingQueryInterface",
};

std::unique_ptr< StorageEngineInterface::Stub> StorageEngineInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageEngineInterface::Stub> stub(new StorageEngineInterface::Stub(channel, options));
  return stub;
}

StorageEngineInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_OffloadingQueryInterface_(StorageEngineInterface_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>* StorageEngineInterface::Stub::OffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response) {
  return ::grpc::internal::ClientWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), rpcmethod_OffloadingQueryInterface_, context, response);
}

void StorageEngineInterface::Stub::async::OffloadingQueryInterface(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::ClientWriteReactor< ::StorageEngineInstance::SnippetRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_OffloadingQueryInterface_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* StorageEngineInterface::Stub::AsyncOffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), cq, rpcmethod_OffloadingQueryInterface_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* StorageEngineInterface::Stub::PrepareAsyncOffloadingQueryInterfaceRaw(::grpc::ClientContext* context, ::StorageEngineInstance::QueryStringResult* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), cq, rpcmethod_OffloadingQueryInterface_, context, response, false, nullptr);
}

StorageEngineInterface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageEngineInterface_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< StorageEngineInterface::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::QueryStringResult>(
          [](StorageEngineInterface::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::StorageEngineInstance::SnippetRequest>* reader,
             ::StorageEngineInstance::QueryStringResult* resp) {
               return service->OffloadingQueryInterface(ctx, reader, resp);
             }, this)));
}

StorageEngineInterface::Service::~Service() {
}

::grpc::Status StorageEngineInterface::Service::OffloadingQueryInterface(::grpc::ServerContext* context, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* reader, ::StorageEngineInstance::QueryStringResult* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace StorageEngineInstance

