// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snippet_sample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snippet_5fsample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snippet_5fsample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snippet_5fsample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snippet_5fsample_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snippet_5fsample_2eproto;
namespace StorageEngineInstance {
class QueryStringResult;
struct QueryStringResultDefaultTypeInternal;
extern QueryStringResultDefaultTypeInternal _QueryStringResult_default_instance_;
class SnippetRequest;
struct SnippetRequestDefaultTypeInternal;
extern SnippetRequestDefaultTypeInternal _SnippetRequest_default_instance_;
class SnippetRequest_Dependency;
struct SnippetRequest_DependencyDefaultTypeInternal;
extern SnippetRequest_DependencyDefaultTypeInternal _SnippetRequest_Dependency_default_instance_;
class SnippetRequest_Filter;
struct SnippetRequest_FilterDefaultTypeInternal;
extern SnippetRequest_FilterDefaultTypeInternal _SnippetRequest_Filter_default_instance_;
class SnippetRequest_Filter_FilterValue;
struct SnippetRequest_Filter_FilterValueDefaultTypeInternal;
extern SnippetRequest_Filter_FilterValueDefaultTypeInternal _SnippetRequest_Filter_FilterValue_default_instance_;
class SnippetRequest_Limit;
struct SnippetRequest_LimitDefaultTypeInternal;
extern SnippetRequest_LimitDefaultTypeInternal _SnippetRequest_Limit_default_instance_;
class SnippetRequest_Order;
struct SnippetRequest_OrderDefaultTypeInternal;
extern SnippetRequest_OrderDefaultTypeInternal _SnippetRequest_Order_default_instance_;
class SnippetRequest_Projection;
struct SnippetRequest_ProjectionDefaultTypeInternal;
extern SnippetRequest_ProjectionDefaultTypeInternal _SnippetRequest_Projection_default_instance_;
class SnippetRequest_QueryInfo;
struct SnippetRequest_QueryInfoDefaultTypeInternal;
extern SnippetRequest_QueryInfoDefaultTypeInternal _SnippetRequest_QueryInfo_default_instance_;
class SnippetRequest_Ref;
struct SnippetRequest_RefDefaultTypeInternal;
extern SnippetRequest_RefDefaultTypeInternal _SnippetRequest_Ref_default_instance_;
class SnippetRequest_ResultInfo;
struct SnippetRequest_ResultInfoDefaultTypeInternal;
extern SnippetRequest_ResultInfoDefaultTypeInternal _SnippetRequest_ResultInfo_default_instance_;
class SnippetRequest_SchemaInfo;
struct SnippetRequest_SchemaInfoDefaultTypeInternal;
extern SnippetRequest_SchemaInfoDefaultTypeInternal _SnippetRequest_SchemaInfo_default_instance_;
class SnippetRequest_SchemaInfo_Column;
struct SnippetRequest_SchemaInfo_ColumnDefaultTypeInternal;
extern SnippetRequest_SchemaInfo_ColumnDefaultTypeInternal _SnippetRequest_SchemaInfo_Column_default_instance_;
class SnippetRequest_SstInfo;
struct SnippetRequest_SstInfoDefaultTypeInternal;
extern SnippetRequest_SstInfoDefaultTypeInternal _SnippetRequest_SstInfo_default_instance_;
class SnippetRequest_SstInfo_CSD;
struct SnippetRequest_SstInfo_CSDDefaultTypeInternal;
extern SnippetRequest_SstInfo_CSDDefaultTypeInternal _SnippetRequest_SstInfo_CSD_default_instance_;
class SnippetRequest_SstInfo_CSD_Block;
struct SnippetRequest_SstInfo_CSD_BlockDefaultTypeInternal;
extern SnippetRequest_SstInfo_CSD_BlockDefaultTypeInternal _SnippetRequest_SstInfo_CSD_Block_default_instance_;
class SnippetRequest_WalInfo;
struct SnippetRequest_WalInfoDefaultTypeInternal;
extern SnippetRequest_WalInfoDefaultTypeInternal _SnippetRequest_WalInfo_default_instance_;
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> ::StorageEngineInstance::QueryStringResult* Arena::CreateMaybeMessage<::StorageEngineInstance::QueryStringResult>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_Dependency* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Dependency>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_Filter* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Filter>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Filter_FilterValue>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_Limit* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Limit>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_Order* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Order>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_Projection* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Projection>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_QueryInfo* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_QueryInfo>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_Ref* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Ref>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_ResultInfo* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_ResultInfo>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_SchemaInfo* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_SchemaInfo>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_SchemaInfo_Column>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_SstInfo* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_SstInfo>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_SstInfo_CSD* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_SstInfo_CSD>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest_WalInfo* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_WalInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace StorageEngineInstance {

enum SnippetRequest_Filter_OperType : int {
  SnippetRequest_Filter_OperType_GE = 0,
  SnippetRequest_Filter_OperType_LE = 1,
  SnippetRequest_Filter_OperType_GT = 2,
  SnippetRequest_Filter_OperType_LT = 3,
  SnippetRequest_Filter_OperType_EQ = 4,
  SnippetRequest_Filter_OperType_NE = 5,
  SnippetRequest_Filter_OperType_LIKE = 6,
  SnippetRequest_Filter_OperType_NOTLIKE = 7,
  SnippetRequest_Filter_OperType_BETWEEN = 8,
  SnippetRequest_Filter_OperType_IN = 9,
  SnippetRequest_Filter_OperType_NOTIN = 10,
  SnippetRequest_Filter_OperType_IS = 11,
  SnippetRequest_Filter_OperType_ISNOT = 12,
  SnippetRequest_Filter_OperType_AND = 13,
  SnippetRequest_Filter_OperType_OR = 14,
  SnippetRequest_Filter_OperType_SnippetRequest_Filter_OperType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SnippetRequest_Filter_OperType_SnippetRequest_Filter_OperType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SnippetRequest_Filter_OperType_IsValid(int value);
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter_OperType_OperType_MIN = SnippetRequest_Filter_OperType_GE;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter_OperType_OperType_MAX = SnippetRequest_Filter_OperType_OR;
constexpr int SnippetRequest_Filter_OperType_OperType_ARRAYSIZE = SnippetRequest_Filter_OperType_OperType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_Filter_OperType_descriptor();
template<typename T>
inline const std::string& SnippetRequest_Filter_OperType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnippetRequest_Filter_OperType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnippetRequest_Filter_OperType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SnippetRequest_Filter_OperType_descriptor(), enum_t_value);
}
inline bool SnippetRequest_Filter_OperType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SnippetRequest_Filter_OperType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SnippetRequest_Filter_OperType>(
    SnippetRequest_Filter_OperType_descriptor(), name, value);
}
enum SnippetRequest_Projection_SelectType : int {
  SnippetRequest_Projection_SelectType_COLUMNNAME = 0,
  SnippetRequest_Projection_SelectType_SUM = 1,
  SnippetRequest_Projection_SelectType_AVG = 2,
  SnippetRequest_Projection_SelectType_COUNT = 3,
  SnippetRequest_Projection_SelectType_COUNTSTAR = 4,
  SnippetRequest_Projection_SelectType_COUNTDISTINCT = 5,
  SnippetRequest_Projection_SelectType_TOP = 6,
  SnippetRequest_Projection_SelectType_MIN = 7,
  SnippetRequest_Projection_SelectType_MAX = 8,
  SnippetRequest_Projection_SelectType_SnippetRequest_Projection_SelectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SnippetRequest_Projection_SelectType_SnippetRequest_Projection_SelectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SnippetRequest_Projection_SelectType_IsValid(int value);
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection_SelectType_SelectType_MIN = SnippetRequest_Projection_SelectType_COLUMNNAME;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection_SelectType_SelectType_MAX = SnippetRequest_Projection_SelectType_MAX;
constexpr int SnippetRequest_Projection_SelectType_SelectType_ARRAYSIZE = SnippetRequest_Projection_SelectType_SelectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_Projection_SelectType_descriptor();
template<typename T>
inline const std::string& SnippetRequest_Projection_SelectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnippetRequest_Projection_SelectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnippetRequest_Projection_SelectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SnippetRequest_Projection_SelectType_descriptor(), enum_t_value);
}
inline bool SnippetRequest_Projection_SelectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SnippetRequest_Projection_SelectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SnippetRequest_Projection_SelectType>(
    SnippetRequest_Projection_SelectType_descriptor(), name, value);
}
enum SnippetRequest_Order_OrderDirection : int {
  SnippetRequest_Order_OrderDirection_ASC = 0,
  SnippetRequest_Order_OrderDirection_DESC = 1,
  SnippetRequest_Order_OrderDirection_SnippetRequest_Order_OrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SnippetRequest_Order_OrderDirection_SnippetRequest_Order_OrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SnippetRequest_Order_OrderDirection_IsValid(int value);
constexpr SnippetRequest_Order_OrderDirection SnippetRequest_Order_OrderDirection_OrderDirection_MIN = SnippetRequest_Order_OrderDirection_ASC;
constexpr SnippetRequest_Order_OrderDirection SnippetRequest_Order_OrderDirection_OrderDirection_MAX = SnippetRequest_Order_OrderDirection_DESC;
constexpr int SnippetRequest_Order_OrderDirection_OrderDirection_ARRAYSIZE = SnippetRequest_Order_OrderDirection_OrderDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_Order_OrderDirection_descriptor();
template<typename T>
inline const std::string& SnippetRequest_Order_OrderDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnippetRequest_Order_OrderDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnippetRequest_Order_OrderDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SnippetRequest_Order_OrderDirection_descriptor(), enum_t_value);
}
inline bool SnippetRequest_Order_OrderDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SnippetRequest_Order_OrderDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SnippetRequest_Order_OrderDirection>(
    SnippetRequest_Order_OrderDirection_descriptor(), name, value);
}
enum SnippetRequest_SnippetType : int {
  SnippetRequest_SnippetType_FULL_SCAN = 0,
  SnippetRequest_SnippetType_INDEX_SCAN = 1,
  SnippetRequest_SnippetType_INDEX_TABLE_SCAN = 2,
  SnippetRequest_SnippetType_AGGREGATION = 3,
  SnippetRequest_SnippetType_FILTER = 4,
  SnippetRequest_SnippetType_INNER_JOIN = 5,
  SnippetRequest_SnippetType_LEFT_OUTER_JOIN = 6,
  SnippetRequest_SnippetType_RIGHT_OUTER_JOIN = 7,
  SnippetRequest_SnippetType_CROSS_JOIN = 8,
  SnippetRequest_SnippetType_UNION = 9,
  SnippetRequest_SnippetType_IN = 10,
  SnippetRequest_SnippetType_EXIST = 11,
  SnippetRequest_SnippetType_DEPENDENCY_INNER_JOIN = 12,
  SnippetRequest_SnippetType_DEPENDENCY_EXIST = 13,
  SnippetRequest_SnippetType_DEPENDENCY_IN = 14,
  SnippetRequest_SnippetType_TMAX_SNIPPET = 15,
  SnippetRequest_SnippetType_SnippetRequest_SnippetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SnippetRequest_SnippetType_SnippetRequest_SnippetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SnippetRequest_SnippetType_IsValid(int value);
constexpr SnippetRequest_SnippetType SnippetRequest_SnippetType_SnippetType_MIN = SnippetRequest_SnippetType_FULL_SCAN;
constexpr SnippetRequest_SnippetType SnippetRequest_SnippetType_SnippetType_MAX = SnippetRequest_SnippetType_TMAX_SNIPPET;
constexpr int SnippetRequest_SnippetType_SnippetType_ARRAYSIZE = SnippetRequest_SnippetType_SnippetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_SnippetType_descriptor();
template<typename T>
inline const std::string& SnippetRequest_SnippetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnippetRequest_SnippetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnippetRequest_SnippetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SnippetRequest_SnippetType_descriptor(), enum_t_value);
}
inline bool SnippetRequest_SnippetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SnippetRequest_SnippetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SnippetRequest_SnippetType>(
    SnippetRequest_SnippetType_descriptor(), name, value);
}
enum SnippetRequest_ValueType : int {
  SnippetRequest_ValueType_INT8 = 0,
  SnippetRequest_ValueType_INT16 = 1,
  SnippetRequest_ValueType_INT32 = 2,
  SnippetRequest_ValueType_INT64 = 3,
  SnippetRequest_ValueType_FLOAT32 = 4,
  SnippetRequest_ValueType_DOUBLE = 5,
  SnippetRequest_ValueType_DECIMAL = 6,
  SnippetRequest_ValueType_DATE = 7,
  SnippetRequest_ValueType_TIMESTAMP = 8,
  SnippetRequest_ValueType_STRING = 9,
  SnippetRequest_ValueType_COLUMN = 10,
  SnippetRequest_ValueType_OPERATOR = 11,
  SnippetRequest_ValueType_BOOLEAN = 12,
  SnippetRequest_ValueType_SnippetRequest_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SnippetRequest_ValueType_SnippetRequest_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SnippetRequest_ValueType_IsValid(int value);
constexpr SnippetRequest_ValueType SnippetRequest_ValueType_ValueType_MIN = SnippetRequest_ValueType_INT8;
constexpr SnippetRequest_ValueType SnippetRequest_ValueType_ValueType_MAX = SnippetRequest_ValueType_BOOLEAN;
constexpr int SnippetRequest_ValueType_ValueType_ARRAYSIZE = SnippetRequest_ValueType_ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_ValueType_descriptor();
template<typename T>
inline const std::string& SnippetRequest_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnippetRequest_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnippetRequest_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SnippetRequest_ValueType_descriptor(), enum_t_value);
}
inline bool SnippetRequest_ValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SnippetRequest_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SnippetRequest_ValueType>(
    SnippetRequest_ValueType_descriptor(), name, value);
}
// ===================================================================

class SnippetRequest_Filter_FilterValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.Filter.FilterValue) */ {
 public:
  inline SnippetRequest_Filter_FilterValue() : SnippetRequest_Filter_FilterValue(nullptr) {}
  ~SnippetRequest_Filter_FilterValue() override;
  explicit constexpr SnippetRequest_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_Filter_FilterValue(const SnippetRequest_Filter_FilterValue& from);
  SnippetRequest_Filter_FilterValue(SnippetRequest_Filter_FilterValue&& from) noexcept
    : SnippetRequest_Filter_FilterValue() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_Filter_FilterValue& operator=(const SnippetRequest_Filter_FilterValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_Filter_FilterValue& operator=(SnippetRequest_Filter_FilterValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_Filter_FilterValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_Filter_FilterValue* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_Filter_FilterValue*>(
               &_SnippetRequest_Filter_FilterValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SnippetRequest_Filter_FilterValue& a, SnippetRequest_Filter_FilterValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_Filter_FilterValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_Filter_FilterValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_Filter_FilterValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_Filter_FilterValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_Filter_FilterValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_Filter_FilterValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_Filter_FilterValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.Filter.FilterValue";
  }
  protected:
  explicit SnippetRequest_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.SnippetRequest.ValueType type = 1;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::StorageEngineInstance::SnippetRequest_ValueType _internal_type(int index) const;
  void _internal_add_type(::StorageEngineInstance::SnippetRequest_ValueType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::StorageEngineInstance::SnippetRequest_ValueType type(int index) const;
  void set_type(int index, ::StorageEngineInstance::SnippetRequest_ValueType value);
  void add_type(::StorageEngineInstance::SnippetRequest_ValueType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_Filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.Filter) */ {
 public:
  inline SnippetRequest_Filter() : SnippetRequest_Filter(nullptr) {}
  ~SnippetRequest_Filter() override;
  explicit constexpr SnippetRequest_Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_Filter(const SnippetRequest_Filter& from);
  SnippetRequest_Filter(SnippetRequest_Filter&& from) noexcept
    : SnippetRequest_Filter() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_Filter& operator=(const SnippetRequest_Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_Filter& operator=(SnippetRequest_Filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_Filter* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_Filter*>(
               &_SnippetRequest_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SnippetRequest_Filter& a, SnippetRequest_Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_Filter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_Filter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_Filter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_Filter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_Filter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.Filter";
  }
  protected:
  explicit SnippetRequest_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetRequest_Filter_FilterValue FilterValue;

  typedef SnippetRequest_Filter_OperType OperType;
  static constexpr OperType GE =
    SnippetRequest_Filter_OperType_GE;
  static constexpr OperType LE =
    SnippetRequest_Filter_OperType_LE;
  static constexpr OperType GT =
    SnippetRequest_Filter_OperType_GT;
  static constexpr OperType LT =
    SnippetRequest_Filter_OperType_LT;
  static constexpr OperType EQ =
    SnippetRequest_Filter_OperType_EQ;
  static constexpr OperType NE =
    SnippetRequest_Filter_OperType_NE;
  static constexpr OperType LIKE =
    SnippetRequest_Filter_OperType_LIKE;
  static constexpr OperType NOTLIKE =
    SnippetRequest_Filter_OperType_NOTLIKE;
  static constexpr OperType BETWEEN =
    SnippetRequest_Filter_OperType_BETWEEN;
  static constexpr OperType IN =
    SnippetRequest_Filter_OperType_IN;
  static constexpr OperType NOTIN =
    SnippetRequest_Filter_OperType_NOTIN;
  static constexpr OperType IS =
    SnippetRequest_Filter_OperType_IS;
  static constexpr OperType ISNOT =
    SnippetRequest_Filter_OperType_ISNOT;
  static constexpr OperType AND =
    SnippetRequest_Filter_OperType_AND;
  static constexpr OperType OR =
    SnippetRequest_Filter_OperType_OR;
  static inline bool OperType_IsValid(int value) {
    return SnippetRequest_Filter_OperType_IsValid(value);
  }
  static constexpr OperType OperType_MIN =
    SnippetRequest_Filter_OperType_OperType_MIN;
  static constexpr OperType OperType_MAX =
    SnippetRequest_Filter_OperType_OperType_MAX;
  static constexpr int OperType_ARRAYSIZE =
    SnippetRequest_Filter_OperType_OperType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperType_descriptor() {
    return SnippetRequest_Filter_OperType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperType_Name.");
    return SnippetRequest_Filter_OperType_Name(enum_t_value);
  }
  static inline bool OperType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperType* value) {
    return SnippetRequest_Filter_OperType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLvFieldNumber = 1,
    kRvFieldNumber = 3,
    kOperatorFieldNumber = 2,
  };
  // .StorageEngineInstance.SnippetRequest.Filter.FilterValue lv = 1;
  bool has_lv() const;
  private:
  bool _internal_has_lv() const;
  public:
  void clear_lv();
  const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& lv() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* release_lv();
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* mutable_lv();
  void set_allocated_lv(::StorageEngineInstance::SnippetRequest_Filter_FilterValue* lv);
  private:
  const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& _internal_lv() const;
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* _internal_mutable_lv();
  public:
  void unsafe_arena_set_allocated_lv(
      ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* lv);
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* unsafe_arena_release_lv();

  // .StorageEngineInstance.SnippetRequest.Filter.FilterValue rv = 3;
  bool has_rv() const;
  private:
  bool _internal_has_rv() const;
  public:
  void clear_rv();
  const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& rv() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* release_rv();
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* mutable_rv();
  void set_allocated_rv(::StorageEngineInstance::SnippetRequest_Filter_FilterValue* rv);
  private:
  const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& _internal_rv() const;
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* _internal_mutable_rv();
  public:
  void unsafe_arena_set_allocated_rv(
      ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* rv);
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* unsafe_arena_release_rv();

  // .StorageEngineInstance.SnippetRequest.Filter.OperType operator = 2;
  void clear_operator_();
  ::StorageEngineInstance::SnippetRequest_Filter_OperType operator_() const;
  void set_operator_(::StorageEngineInstance::SnippetRequest_Filter_OperType value);
  private:
  ::StorageEngineInstance::SnippetRequest_Filter_OperType _internal_operator_() const;
  void _internal_set_operator_(::StorageEngineInstance::SnippetRequest_Filter_OperType value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* lv_;
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* rv_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_Projection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.Projection) */ {
 public:
  inline SnippetRequest_Projection() : SnippetRequest_Projection(nullptr) {}
  ~SnippetRequest_Projection() override;
  explicit constexpr SnippetRequest_Projection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_Projection(const SnippetRequest_Projection& from);
  SnippetRequest_Projection(SnippetRequest_Projection&& from) noexcept
    : SnippetRequest_Projection() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_Projection& operator=(const SnippetRequest_Projection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_Projection& operator=(SnippetRequest_Projection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_Projection& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_Projection* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_Projection*>(
               &_SnippetRequest_Projection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SnippetRequest_Projection& a, SnippetRequest_Projection& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_Projection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_Projection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_Projection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_Projection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_Projection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_Projection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_Projection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.Projection";
  }
  protected:
  explicit SnippetRequest_Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetRequest_Projection_SelectType SelectType;
  static constexpr SelectType COLUMNNAME =
    SnippetRequest_Projection_SelectType_COLUMNNAME;
  static constexpr SelectType SUM =
    SnippetRequest_Projection_SelectType_SUM;
  static constexpr SelectType AVG =
    SnippetRequest_Projection_SelectType_AVG;
  static constexpr SelectType COUNT =
    SnippetRequest_Projection_SelectType_COUNT;
  static constexpr SelectType COUNTSTAR =
    SnippetRequest_Projection_SelectType_COUNTSTAR;
  static constexpr SelectType COUNTDISTINCT =
    SnippetRequest_Projection_SelectType_COUNTDISTINCT;
  static constexpr SelectType TOP =
    SnippetRequest_Projection_SelectType_TOP;
  static constexpr SelectType MIN =
    SnippetRequest_Projection_SelectType_MIN;
  static constexpr SelectType MAX =
    SnippetRequest_Projection_SelectType_MAX;
  static inline bool SelectType_IsValid(int value) {
    return SnippetRequest_Projection_SelectType_IsValid(value);
  }
  static constexpr SelectType SelectType_MIN =
    SnippetRequest_Projection_SelectType_SelectType_MIN;
  static constexpr SelectType SelectType_MAX =
    SnippetRequest_Projection_SelectType_SelectType_MAX;
  static constexpr int SelectType_ARRAYSIZE =
    SnippetRequest_Projection_SelectType_SelectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SelectType_descriptor() {
    return SnippetRequest_Projection_SelectType_descriptor();
  }
  template<typename T>
  static inline const std::string& SelectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SelectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SelectType_Name.");
    return SnippetRequest_Projection_SelectType_Name(enum_t_value);
  }
  static inline bool SelectType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SelectType* value) {
    return SnippetRequest_Projection_SelectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kValueTypeFieldNumber = 3,
    kSelectTypeFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // repeated .StorageEngineInstance.SnippetRequest.ValueType value_type = 3;
  int value_type_size() const;
  private:
  int _internal_value_type_size() const;
  public:
  void clear_value_type();
  private:
  ::StorageEngineInstance::SnippetRequest_ValueType _internal_value_type(int index) const;
  void _internal_add_value_type(::StorageEngineInstance::SnippetRequest_ValueType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_value_type();
  public:
  ::StorageEngineInstance::SnippetRequest_ValueType value_type(int index) const;
  void set_value_type(int index, ::StorageEngineInstance::SnippetRequest_ValueType value);
  void add_value_type(::StorageEngineInstance::SnippetRequest_ValueType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& value_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_value_type();

  // .StorageEngineInstance.SnippetRequest.Projection.SelectType select_type = 1;
  void clear_select_type();
  ::StorageEngineInstance::SnippetRequest_Projection_SelectType select_type() const;
  void set_select_type(::StorageEngineInstance::SnippetRequest_Projection_SelectType value);
  private:
  ::StorageEngineInstance::SnippetRequest_Projection_SelectType _internal_select_type() const;
  void _internal_set_select_type(::StorageEngineInstance::SnippetRequest_Projection_SelectType value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.Projection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> value_type_;
  mutable std::atomic<int> _value_type_cached_byte_size_;
  int select_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.Order) */ {
 public:
  inline SnippetRequest_Order() : SnippetRequest_Order(nullptr) {}
  ~SnippetRequest_Order() override;
  explicit constexpr SnippetRequest_Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_Order(const SnippetRequest_Order& from);
  SnippetRequest_Order(SnippetRequest_Order&& from) noexcept
    : SnippetRequest_Order() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_Order& operator=(const SnippetRequest_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_Order& operator=(SnippetRequest_Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_Order* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_Order*>(
               &_SnippetRequest_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SnippetRequest_Order& a, SnippetRequest_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_Order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_Order& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_Order* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.Order";
  }
  protected:
  explicit SnippetRequest_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetRequest_Order_OrderDirection OrderDirection;
  static constexpr OrderDirection ASC =
    SnippetRequest_Order_OrderDirection_ASC;
  static constexpr OrderDirection DESC =
    SnippetRequest_Order_OrderDirection_DESC;
  static inline bool OrderDirection_IsValid(int value) {
    return SnippetRequest_Order_OrderDirection_IsValid(value);
  }
  static constexpr OrderDirection OrderDirection_MIN =
    SnippetRequest_Order_OrderDirection_OrderDirection_MIN;
  static constexpr OrderDirection OrderDirection_MAX =
    SnippetRequest_Order_OrderDirection_OrderDirection_MAX;
  static constexpr int OrderDirection_ARRAYSIZE =
    SnippetRequest_Order_OrderDirection_OrderDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OrderDirection_descriptor() {
    return SnippetRequest_Order_OrderDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& OrderDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OrderDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OrderDirection_Name.");
    return SnippetRequest_Order_OrderDirection_Name(enum_t_value);
  }
  static inline bool OrderDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OrderDirection* value) {
    return SnippetRequest_Order_OrderDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAscendingFieldNumber = 1,
    kColumnNameFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.SnippetRequest.Order.OrderDirection ascending = 1;
  int ascending_size() const;
  private:
  int _internal_ascending_size() const;
  public:
  void clear_ascending();
  private:
  ::StorageEngineInstance::SnippetRequest_Order_OrderDirection _internal_ascending(int index) const;
  void _internal_add_ascending(::StorageEngineInstance::SnippetRequest_Order_OrderDirection value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ascending();
  public:
  ::StorageEngineInstance::SnippetRequest_Order_OrderDirection ascending(int index) const;
  void set_ascending(int index, ::StorageEngineInstance::SnippetRequest_Order_OrderDirection value);
  void add_ascending(::StorageEngineInstance::SnippetRequest_Order_OrderDirection value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ascending() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ascending();

  // repeated string column_name = 2;
  int column_name_size() const;
  private:
  int _internal_column_name_size() const;
  public:
  void clear_column_name();
  const std::string& column_name(int index) const;
  std::string* mutable_column_name(int index);
  void set_column_name(int index, const std::string& value);
  void set_column_name(int index, std::string&& value);
  void set_column_name(int index, const char* value);
  void set_column_name(int index, const char* value, size_t size);
  std::string* add_column_name();
  void add_column_name(const std::string& value);
  void add_column_name(std::string&& value);
  void add_column_name(const char* value);
  void add_column_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_name();
  private:
  const std::string& _internal_column_name(int index) const;
  std::string* _internal_add_column_name();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ascending_;
  mutable std::atomic<int> _ascending_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_Dependency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.Dependency) */ {
 public:
  inline SnippetRequest_Dependency() : SnippetRequest_Dependency(nullptr) {}
  ~SnippetRequest_Dependency() override;
  explicit constexpr SnippetRequest_Dependency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_Dependency(const SnippetRequest_Dependency& from);
  SnippetRequest_Dependency(SnippetRequest_Dependency&& from) noexcept
    : SnippetRequest_Dependency() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_Dependency& operator=(const SnippetRequest_Dependency& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_Dependency& operator=(SnippetRequest_Dependency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_Dependency& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_Dependency* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_Dependency*>(
               &_SnippetRequest_Dependency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SnippetRequest_Dependency& a, SnippetRequest_Dependency& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_Dependency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_Dependency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_Dependency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_Dependency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_Dependency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_Dependency& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_Dependency* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.Dependency";
  }
  protected:
  explicit SnippetRequest_Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependencyProjectionFieldNumber = 1,
    kDependencyFilterFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.SnippetRequest.Projection dependency_projection = 1;
  int dependency_projection_size() const;
  private:
  int _internal_dependency_projection_size() const;
  public:
  void clear_dependency_projection();
  ::StorageEngineInstance::SnippetRequest_Projection* mutable_dependency_projection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection >*
      mutable_dependency_projection();
  private:
  const ::StorageEngineInstance::SnippetRequest_Projection& _internal_dependency_projection(int index) const;
  ::StorageEngineInstance::SnippetRequest_Projection* _internal_add_dependency_projection();
  public:
  const ::StorageEngineInstance::SnippetRequest_Projection& dependency_projection(int index) const;
  ::StorageEngineInstance::SnippetRequest_Projection* add_dependency_projection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection >&
      dependency_projection() const;

  // repeated .StorageEngineInstance.SnippetRequest.Filter dependency_filter = 2;
  int dependency_filter_size() const;
  private:
  int _internal_dependency_filter_size() const;
  public:
  void clear_dependency_filter();
  ::StorageEngineInstance::SnippetRequest_Filter* mutable_dependency_filter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >*
      mutable_dependency_filter();
  private:
  const ::StorageEngineInstance::SnippetRequest_Filter& _internal_dependency_filter(int index) const;
  ::StorageEngineInstance::SnippetRequest_Filter* _internal_add_dependency_filter();
  public:
  const ::StorageEngineInstance::SnippetRequest_Filter& dependency_filter(int index) const;
  ::StorageEngineInstance::SnippetRequest_Filter* add_dependency_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >&
      dependency_filter() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.Dependency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection > dependency_projection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter > dependency_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_Limit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.Limit) */ {
 public:
  inline SnippetRequest_Limit() : SnippetRequest_Limit(nullptr) {}
  ~SnippetRequest_Limit() override;
  explicit constexpr SnippetRequest_Limit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_Limit(const SnippetRequest_Limit& from);
  SnippetRequest_Limit(SnippetRequest_Limit&& from) noexcept
    : SnippetRequest_Limit() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_Limit& operator=(const SnippetRequest_Limit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_Limit& operator=(SnippetRequest_Limit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_Limit& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_Limit* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_Limit*>(
               &_SnippetRequest_Limit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SnippetRequest_Limit& a, SnippetRequest_Limit& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_Limit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_Limit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_Limit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_Limit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_Limit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_Limit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_Limit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.Limit";
  }
  protected:
  explicit SnippetRequest_Limit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // int32 offset = 1;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.Limit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t offset_;
  int32_t length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_Ref final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.Ref) */ {
 public:
  inline SnippetRequest_Ref() : SnippetRequest_Ref(nullptr) {}
  ~SnippetRequest_Ref() override;
  explicit constexpr SnippetRequest_Ref(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_Ref(const SnippetRequest_Ref& from);
  SnippetRequest_Ref(SnippetRequest_Ref&& from) noexcept
    : SnippetRequest_Ref() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_Ref& operator=(const SnippetRequest_Ref& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_Ref& operator=(SnippetRequest_Ref&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_Ref& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_Ref* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_Ref*>(
               &_SnippetRequest_Ref_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SnippetRequest_Ref& a, SnippetRequest_Ref& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_Ref* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_Ref* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_Ref* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_Ref>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_Ref& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_Ref& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_Ref* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.Ref";
  }
  protected:
  explicit SnippetRequest_Ref(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kColumnNameFieldNumber = 2,
  };
  // string table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string column_name = 2;
  void clear_column_name();
  const std::string& column_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_column_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_column_name();
  PROTOBUF_NODISCARD std::string* release_column_name();
  void set_allocated_column_name(std::string* column_name);
  private:
  const std::string& _internal_column_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_column_name(const std::string& value);
  std::string* _internal_mutable_column_name();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.Ref)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_QueryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.QueryInfo) */ {
 public:
  inline SnippetRequest_QueryInfo() : SnippetRequest_QueryInfo(nullptr) {}
  ~SnippetRequest_QueryInfo() override;
  explicit constexpr SnippetRequest_QueryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_QueryInfo(const SnippetRequest_QueryInfo& from);
  SnippetRequest_QueryInfo(SnippetRequest_QueryInfo&& from) noexcept
    : SnippetRequest_QueryInfo() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_QueryInfo& operator=(const SnippetRequest_QueryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_QueryInfo& operator=(SnippetRequest_QueryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_QueryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_QueryInfo* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_QueryInfo*>(
               &_SnippetRequest_QueryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SnippetRequest_QueryInfo& a, SnippetRequest_QueryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_QueryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_QueryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_QueryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_QueryInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_QueryInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_QueryInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_QueryInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.QueryInfo";
  }
  protected:
  explicit SnippetRequest_QueryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kFilteringFieldNumber = 2,
    kProjectionFieldNumber = 3,
    kHavingFieldNumber = 4,
    kGroupByFieldNumber = 5,
    kOrderByFieldNumber = 6,
    kLimitFieldNumber = 7,
    kDependencyFieldNumber = 8,
    kRefFieldNumber = 9,
  };
  // repeated string table_name = 1;
  int table_name_size() const;
  private:
  int _internal_table_name_size() const;
  public:
  void clear_table_name();
  const std::string& table_name(int index) const;
  std::string* mutable_table_name(int index);
  void set_table_name(int index, const std::string& value);
  void set_table_name(int index, std::string&& value);
  void set_table_name(int index, const char* value);
  void set_table_name(int index, const char* value, size_t size);
  std::string* add_table_name();
  void add_table_name(const std::string& value);
  void add_table_name(std::string&& value);
  void add_table_name(const char* value);
  void add_table_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& table_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_table_name();
  private:
  const std::string& _internal_table_name(int index) const;
  std::string* _internal_add_table_name();
  public:

  // repeated .StorageEngineInstance.SnippetRequest.Filter filtering = 2;
  int filtering_size() const;
  private:
  int _internal_filtering_size() const;
  public:
  void clear_filtering();
  ::StorageEngineInstance::SnippetRequest_Filter* mutable_filtering(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >*
      mutable_filtering();
  private:
  const ::StorageEngineInstance::SnippetRequest_Filter& _internal_filtering(int index) const;
  ::StorageEngineInstance::SnippetRequest_Filter* _internal_add_filtering();
  public:
  const ::StorageEngineInstance::SnippetRequest_Filter& filtering(int index) const;
  ::StorageEngineInstance::SnippetRequest_Filter* add_filtering();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >&
      filtering() const;

  // repeated .StorageEngineInstance.SnippetRequest.Projection projection = 3;
  int projection_size() const;
  private:
  int _internal_projection_size() const;
  public:
  void clear_projection();
  ::StorageEngineInstance::SnippetRequest_Projection* mutable_projection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection >*
      mutable_projection();
  private:
  const ::StorageEngineInstance::SnippetRequest_Projection& _internal_projection(int index) const;
  ::StorageEngineInstance::SnippetRequest_Projection* _internal_add_projection();
  public:
  const ::StorageEngineInstance::SnippetRequest_Projection& projection(int index) const;
  ::StorageEngineInstance::SnippetRequest_Projection* add_projection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection >&
      projection() const;

  // repeated .StorageEngineInstance.SnippetRequest.Filter having = 4;
  int having_size() const;
  private:
  int _internal_having_size() const;
  public:
  void clear_having();
  ::StorageEngineInstance::SnippetRequest_Filter* mutable_having(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >*
      mutable_having();
  private:
  const ::StorageEngineInstance::SnippetRequest_Filter& _internal_having(int index) const;
  ::StorageEngineInstance::SnippetRequest_Filter* _internal_add_having();
  public:
  const ::StorageEngineInstance::SnippetRequest_Filter& having(int index) const;
  ::StorageEngineInstance::SnippetRequest_Filter* add_having();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >&
      having() const;

  // repeated string group_by = 5;
  int group_by_size() const;
  private:
  int _internal_group_by_size() const;
  public:
  void clear_group_by();
  const std::string& group_by(int index) const;
  std::string* mutable_group_by(int index);
  void set_group_by(int index, const std::string& value);
  void set_group_by(int index, std::string&& value);
  void set_group_by(int index, const char* value);
  void set_group_by(int index, const char* value, size_t size);
  std::string* add_group_by();
  void add_group_by(const std::string& value);
  void add_group_by(std::string&& value);
  void add_group_by(const char* value);
  void add_group_by(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_by() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_by();
  private:
  const std::string& _internal_group_by(int index) const;
  std::string* _internal_add_group_by();
  public:

  // .StorageEngineInstance.SnippetRequest.Order order_by = 6;
  bool has_order_by() const;
  private:
  bool _internal_has_order_by() const;
  public:
  void clear_order_by();
  const ::StorageEngineInstance::SnippetRequest_Order& order_by() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_Order* release_order_by();
  ::StorageEngineInstance::SnippetRequest_Order* mutable_order_by();
  void set_allocated_order_by(::StorageEngineInstance::SnippetRequest_Order* order_by);
  private:
  const ::StorageEngineInstance::SnippetRequest_Order& _internal_order_by() const;
  ::StorageEngineInstance::SnippetRequest_Order* _internal_mutable_order_by();
  public:
  void unsafe_arena_set_allocated_order_by(
      ::StorageEngineInstance::SnippetRequest_Order* order_by);
  ::StorageEngineInstance::SnippetRequest_Order* unsafe_arena_release_order_by();

  // .StorageEngineInstance.SnippetRequest.Limit limit = 7;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const ::StorageEngineInstance::SnippetRequest_Limit& limit() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_Limit* release_limit();
  ::StorageEngineInstance::SnippetRequest_Limit* mutable_limit();
  void set_allocated_limit(::StorageEngineInstance::SnippetRequest_Limit* limit);
  private:
  const ::StorageEngineInstance::SnippetRequest_Limit& _internal_limit() const;
  ::StorageEngineInstance::SnippetRequest_Limit* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      ::StorageEngineInstance::SnippetRequest_Limit* limit);
  ::StorageEngineInstance::SnippetRequest_Limit* unsafe_arena_release_limit();

  // .StorageEngineInstance.SnippetRequest.Dependency dependency = 8;
  bool has_dependency() const;
  private:
  bool _internal_has_dependency() const;
  public:
  void clear_dependency();
  const ::StorageEngineInstance::SnippetRequest_Dependency& dependency() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_Dependency* release_dependency();
  ::StorageEngineInstance::SnippetRequest_Dependency* mutable_dependency();
  void set_allocated_dependency(::StorageEngineInstance::SnippetRequest_Dependency* dependency);
  private:
  const ::StorageEngineInstance::SnippetRequest_Dependency& _internal_dependency() const;
  ::StorageEngineInstance::SnippetRequest_Dependency* _internal_mutable_dependency();
  public:
  void unsafe_arena_set_allocated_dependency(
      ::StorageEngineInstance::SnippetRequest_Dependency* dependency);
  ::StorageEngineInstance::SnippetRequest_Dependency* unsafe_arena_release_dependency();

  // .StorageEngineInstance.SnippetRequest.Ref ref = 9;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const ::StorageEngineInstance::SnippetRequest_Ref& ref() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_Ref* release_ref();
  ::StorageEngineInstance::SnippetRequest_Ref* mutable_ref();
  void set_allocated_ref(::StorageEngineInstance::SnippetRequest_Ref* ref);
  private:
  const ::StorageEngineInstance::SnippetRequest_Ref& _internal_ref() const;
  ::StorageEngineInstance::SnippetRequest_Ref* _internal_mutable_ref();
  public:
  void unsafe_arena_set_allocated_ref(
      ::StorageEngineInstance::SnippetRequest_Ref* ref);
  ::StorageEngineInstance::SnippetRequest_Ref* unsafe_arena_release_ref();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.QueryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> table_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter > filtering_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection > projection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter > having_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_by_;
  ::StorageEngineInstance::SnippetRequest_Order* order_by_;
  ::StorageEngineInstance::SnippetRequest_Limit* limit_;
  ::StorageEngineInstance::SnippetRequest_Dependency* dependency_;
  ::StorageEngineInstance::SnippetRequest_Ref* ref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_SchemaInfo_Column final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.SchemaInfo.Column) */ {
 public:
  inline SnippetRequest_SchemaInfo_Column() : SnippetRequest_SchemaInfo_Column(nullptr) {}
  ~SnippetRequest_SchemaInfo_Column() override;
  explicit constexpr SnippetRequest_SchemaInfo_Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_SchemaInfo_Column(const SnippetRequest_SchemaInfo_Column& from);
  SnippetRequest_SchemaInfo_Column(SnippetRequest_SchemaInfo_Column&& from) noexcept
    : SnippetRequest_SchemaInfo_Column() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_SchemaInfo_Column& operator=(const SnippetRequest_SchemaInfo_Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_SchemaInfo_Column& operator=(SnippetRequest_SchemaInfo_Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_SchemaInfo_Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_SchemaInfo_Column* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_SchemaInfo_Column*>(
               &_SnippetRequest_SchemaInfo_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SnippetRequest_SchemaInfo_Column& a, SnippetRequest_SchemaInfo_Column& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_SchemaInfo_Column* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_SchemaInfo_Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_SchemaInfo_Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_SchemaInfo_Column>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_SchemaInfo_Column& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_SchemaInfo_Column& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_SchemaInfo_Column* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.SchemaInfo.Column";
  }
  protected:
  explicit SnippetRequest_SchemaInfo_Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLengthFieldNumber = 2,
    kTypeFieldNumber = 3,
    kPrimaryFieldNumber = 4,
    kIndexFieldNumber = 5,
    kNullableFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // bool primary = 4;
  void clear_primary();
  bool primary() const;
  void set_primary(bool value);
  private:
  bool _internal_primary() const;
  void _internal_set_primary(bool value);
  public:

  // bool index = 5;
  void clear_index();
  bool index() const;
  void set_index(bool value);
  private:
  bool _internal_index() const;
  void _internal_set_index(bool value);
  public:

  // bool nullable = 6;
  void clear_nullable();
  bool nullable() const;
  void set_nullable(bool value);
  private:
  bool _internal_nullable() const;
  void _internal_set_nullable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t length_;
  int32_t type_;
  bool primary_;
  bool index_;
  bool nullable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_SchemaInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.SchemaInfo) */ {
 public:
  inline SnippetRequest_SchemaInfo() : SnippetRequest_SchemaInfo(nullptr) {}
  ~SnippetRequest_SchemaInfo() override;
  explicit constexpr SnippetRequest_SchemaInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_SchemaInfo(const SnippetRequest_SchemaInfo& from);
  SnippetRequest_SchemaInfo(SnippetRequest_SchemaInfo&& from) noexcept
    : SnippetRequest_SchemaInfo() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_SchemaInfo& operator=(const SnippetRequest_SchemaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_SchemaInfo& operator=(SnippetRequest_SchemaInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_SchemaInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_SchemaInfo* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_SchemaInfo*>(
               &_SnippetRequest_SchemaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SnippetRequest_SchemaInfo& a, SnippetRequest_SchemaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_SchemaInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_SchemaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_SchemaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_SchemaInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_SchemaInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_SchemaInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_SchemaInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.SchemaInfo";
  }
  protected:
  explicit SnippetRequest_SchemaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetRequest_SchemaInfo_Column Column;

  // accessors -------------------------------------------------------

  enum : int {
    kColumnListFieldNumber = 1,
    kTableIndexNumberFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.SnippetRequest.SchemaInfo.Column column_list = 1;
  int column_list_size() const;
  private:
  int _internal_column_list_size() const;
  public:
  void clear_column_list();
  ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column* mutable_column_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column >*
      mutable_column_list();
  private:
  const ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column& _internal_column_list(int index) const;
  ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column* _internal_add_column_list();
  public:
  const ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column& column_list(int index) const;
  ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column* add_column_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column >&
      column_list() const;

  // int32 table_index_number = 2;
  void clear_table_index_number();
  int32_t table_index_number() const;
  void set_table_index_number(int32_t value);
  private:
  int32_t _internal_table_index_number() const;
  void _internal_set_table_index_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.SchemaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column > column_list_;
  int32_t table_index_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_SstInfo_CSD_Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block) */ {
 public:
  inline SnippetRequest_SstInfo_CSD_Block() : SnippetRequest_SstInfo_CSD_Block(nullptr) {}
  ~SnippetRequest_SstInfo_CSD_Block() override;
  explicit constexpr SnippetRequest_SstInfo_CSD_Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_SstInfo_CSD_Block(const SnippetRequest_SstInfo_CSD_Block& from);
  SnippetRequest_SstInfo_CSD_Block(SnippetRequest_SstInfo_CSD_Block&& from) noexcept
    : SnippetRequest_SstInfo_CSD_Block() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_SstInfo_CSD_Block& operator=(const SnippetRequest_SstInfo_CSD_Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_SstInfo_CSD_Block& operator=(SnippetRequest_SstInfo_CSD_Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_SstInfo_CSD_Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_SstInfo_CSD_Block* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_SstInfo_CSD_Block*>(
               &_SnippetRequest_SstInfo_CSD_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SnippetRequest_SstInfo_CSD_Block& a, SnippetRequest_SstInfo_CSD_Block& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_SstInfo_CSD_Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_SstInfo_CSD_Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_SstInfo_CSD_Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_SstInfo_CSD_Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_SstInfo_CSD_Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_SstInfo_CSD_Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_SstInfo_CSD_Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block";
  }
  protected:
  explicit SnippetRequest_SstInfo_CSD_Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // repeated int64 offset = 1;
  int offset_size() const;
  private:
  int _internal_offset_size() const;
  public:
  void clear_offset();
  private:
  int64_t _internal_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_offset() const;
  void _internal_add_offset(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_offset();
  public:
  int64_t offset(int index) const;
  void set_offset(int index, int64_t value);
  void add_offset(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_offset();

  // repeated int32 length = 2;
  int length_size() const;
  private:
  int _internal_length_size() const;
  public:
  void clear_length();
  private:
  int32_t _internal_length(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_length() const;
  void _internal_add_length(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_length();
  public:
  int32_t length(int index) const;
  void set_length(int index, int32_t value);
  void add_length(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      length() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_length();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > offset_;
  mutable std::atomic<int> _offset_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > length_;
  mutable std::atomic<int> _length_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_SstInfo_CSD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.SstInfo.CSD) */ {
 public:
  inline SnippetRequest_SstInfo_CSD() : SnippetRequest_SstInfo_CSD(nullptr) {}
  ~SnippetRequest_SstInfo_CSD() override;
  explicit constexpr SnippetRequest_SstInfo_CSD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_SstInfo_CSD(const SnippetRequest_SstInfo_CSD& from);
  SnippetRequest_SstInfo_CSD(SnippetRequest_SstInfo_CSD&& from) noexcept
    : SnippetRequest_SstInfo_CSD() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_SstInfo_CSD& operator=(const SnippetRequest_SstInfo_CSD& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_SstInfo_CSD& operator=(SnippetRequest_SstInfo_CSD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_SstInfo_CSD& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_SstInfo_CSD* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_SstInfo_CSD*>(
               &_SnippetRequest_SstInfo_CSD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SnippetRequest_SstInfo_CSD& a, SnippetRequest_SstInfo_CSD& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_SstInfo_CSD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_SstInfo_CSD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_SstInfo_CSD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_SstInfo_CSD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_SstInfo_CSD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_SstInfo_CSD& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_SstInfo_CSD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.SstInfo.CSD";
  }
  protected:
  explicit SnippetRequest_SstInfo_CSD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetRequest_SstInfo_CSD_Block Block;

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 3,
    kCsdIdFieldNumber = 1,
    kPartitionFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block block = 3;
  int block_size() const;
  private:
  int _internal_block_size() const;
  public:
  void clear_block();
  ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block* mutable_block(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block >*
      mutable_block();
  private:
  const ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block& _internal_block(int index) const;
  ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block* _internal_add_block();
  public:
  const ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block& block(int index) const;
  ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block* add_block();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block >&
      block() const;

  // string csd_id = 1;
  void clear_csd_id();
  const std::string& csd_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csd_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csd_id();
  PROTOBUF_NODISCARD std::string* release_csd_id();
  void set_allocated_csd_id(std::string* csd_id);
  private:
  const std::string& _internal_csd_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csd_id(const std::string& value);
  std::string* _internal_mutable_csd_id();
  public:

  // string partition = 2;
  void clear_partition();
  const std::string& partition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition();
  PROTOBUF_NODISCARD std::string* release_partition();
  void set_allocated_partition(std::string* partition);
  private:
  const std::string& _internal_partition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition(const std::string& value);
  std::string* _internal_mutable_partition();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block > block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csd_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_SstInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.SstInfo) */ {
 public:
  inline SnippetRequest_SstInfo() : SnippetRequest_SstInfo(nullptr) {}
  ~SnippetRequest_SstInfo() override;
  explicit constexpr SnippetRequest_SstInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_SstInfo(const SnippetRequest_SstInfo& from);
  SnippetRequest_SstInfo(SnippetRequest_SstInfo&& from) noexcept
    : SnippetRequest_SstInfo() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_SstInfo& operator=(const SnippetRequest_SstInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_SstInfo& operator=(SnippetRequest_SstInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_SstInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_SstInfo* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_SstInfo*>(
               &_SnippetRequest_SstInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SnippetRequest_SstInfo& a, SnippetRequest_SstInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_SstInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_SstInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_SstInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_SstInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_SstInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_SstInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_SstInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.SstInfo";
  }
  protected:
  explicit SnippetRequest_SstInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetRequest_SstInfo_CSD CSD;

  // accessors -------------------------------------------------------

  enum : int {
    kCsdFieldNumber = 2,
    kSstNameFieldNumber = 1,
    kSstBlockCountFieldNumber = 3,
  };
  // repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD csd = 2;
  int csd_size() const;
  private:
  int _internal_csd_size() const;
  public:
  void clear_csd();
  ::StorageEngineInstance::SnippetRequest_SstInfo_CSD* mutable_csd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD >*
      mutable_csd();
  private:
  const ::StorageEngineInstance::SnippetRequest_SstInfo_CSD& _internal_csd(int index) const;
  ::StorageEngineInstance::SnippetRequest_SstInfo_CSD* _internal_add_csd();
  public:
  const ::StorageEngineInstance::SnippetRequest_SstInfo_CSD& csd(int index) const;
  ::StorageEngineInstance::SnippetRequest_SstInfo_CSD* add_csd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD >&
      csd() const;

  // string sst_name = 1;
  void clear_sst_name();
  const std::string& sst_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sst_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sst_name();
  PROTOBUF_NODISCARD std::string* release_sst_name();
  void set_allocated_sst_name(std::string* sst_name);
  private:
  const std::string& _internal_sst_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sst_name(const std::string& value);
  std::string* _internal_mutable_sst_name();
  public:

  // int32 sst_block_count = 3;
  void clear_sst_block_count();
  int32_t sst_block_count() const;
  void set_sst_block_count(int32_t value);
  private:
  int32_t _internal_sst_block_count() const;
  void _internal_set_sst_block_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.SstInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD > csd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sst_name_;
  int32_t sst_block_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_WalInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.WalInfo) */ {
 public:
  inline SnippetRequest_WalInfo() : SnippetRequest_WalInfo(nullptr) {}
  ~SnippetRequest_WalInfo() override;
  explicit constexpr SnippetRequest_WalInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_WalInfo(const SnippetRequest_WalInfo& from);
  SnippetRequest_WalInfo(SnippetRequest_WalInfo&& from) noexcept
    : SnippetRequest_WalInfo() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_WalInfo& operator=(const SnippetRequest_WalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_WalInfo& operator=(SnippetRequest_WalInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_WalInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_WalInfo* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_WalInfo*>(
               &_SnippetRequest_WalInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SnippetRequest_WalInfo& a, SnippetRequest_WalInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_WalInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_WalInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_WalInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_WalInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_WalInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_WalInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_WalInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.WalInfo";
  }
  protected:
  explicit SnippetRequest_WalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedKeyFieldNumber = 1,
    kInsertedKeyFieldNumber = 2,
    kInsertedValueFieldNumber = 3,
  };
  // repeated string deleted_key = 1;
  int deleted_key_size() const;
  private:
  int _internal_deleted_key_size() const;
  public:
  void clear_deleted_key();
  const std::string& deleted_key(int index) const;
  std::string* mutable_deleted_key(int index);
  void set_deleted_key(int index, const std::string& value);
  void set_deleted_key(int index, std::string&& value);
  void set_deleted_key(int index, const char* value);
  void set_deleted_key(int index, const char* value, size_t size);
  std::string* add_deleted_key();
  void add_deleted_key(const std::string& value);
  void add_deleted_key(std::string&& value);
  void add_deleted_key(const char* value);
  void add_deleted_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deleted_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deleted_key();
  private:
  const std::string& _internal_deleted_key(int index) const;
  std::string* _internal_add_deleted_key();
  public:

  // repeated string inserted_key = 2;
  int inserted_key_size() const;
  private:
  int _internal_inserted_key_size() const;
  public:
  void clear_inserted_key();
  const std::string& inserted_key(int index) const;
  std::string* mutable_inserted_key(int index);
  void set_inserted_key(int index, const std::string& value);
  void set_inserted_key(int index, std::string&& value);
  void set_inserted_key(int index, const char* value);
  void set_inserted_key(int index, const char* value, size_t size);
  std::string* add_inserted_key();
  void add_inserted_key(const std::string& value);
  void add_inserted_key(std::string&& value);
  void add_inserted_key(const char* value);
  void add_inserted_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inserted_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inserted_key();
  private:
  const std::string& _internal_inserted_key(int index) const;
  std::string* _internal_add_inserted_key();
  public:

  // repeated string inserted_value = 3;
  int inserted_value_size() const;
  private:
  int _internal_inserted_value_size() const;
  public:
  void clear_inserted_value();
  const std::string& inserted_value(int index) const;
  std::string* mutable_inserted_value(int index);
  void set_inserted_value(int index, const std::string& value);
  void set_inserted_value(int index, std::string&& value);
  void set_inserted_value(int index, const char* value);
  void set_inserted_value(int index, const char* value, size_t size);
  std::string* add_inserted_value();
  void add_inserted_value(const std::string& value);
  void add_inserted_value(std::string&& value);
  void add_inserted_value(const char* value);
  void add_inserted_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inserted_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inserted_value();
  private:
  const std::string& _internal_inserted_value(int index) const;
  std::string* _internal_add_inserted_value();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.WalInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deleted_key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inserted_key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inserted_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest_ResultInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest.ResultInfo) */ {
 public:
  inline SnippetRequest_ResultInfo() : SnippetRequest_ResultInfo(nullptr) {}
  ~SnippetRequest_ResultInfo() override;
  explicit constexpr SnippetRequest_ResultInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest_ResultInfo(const SnippetRequest_ResultInfo& from);
  SnippetRequest_ResultInfo(SnippetRequest_ResultInfo&& from) noexcept
    : SnippetRequest_ResultInfo() {
    *this = ::std::move(from);
  }

  inline SnippetRequest_ResultInfo& operator=(const SnippetRequest_ResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest_ResultInfo& operator=(SnippetRequest_ResultInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest_ResultInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest_ResultInfo* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest_ResultInfo*>(
               &_SnippetRequest_ResultInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SnippetRequest_ResultInfo& a, SnippetRequest_ResultInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest_ResultInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest_ResultInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest_ResultInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest_ResultInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest_ResultInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest_ResultInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest_ResultInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest.ResultInfo";
  }
  protected:
  explicit SnippetRequest_ResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnAliasFieldNumber = 2,
    kTableAliasFieldNumber = 1,
    kTotalBlockCountFieldNumber = 3,
  };
  // repeated string column_alias = 2;
  int column_alias_size() const;
  private:
  int _internal_column_alias_size() const;
  public:
  void clear_column_alias();
  const std::string& column_alias(int index) const;
  std::string* mutable_column_alias(int index);
  void set_column_alias(int index, const std::string& value);
  void set_column_alias(int index, std::string&& value);
  void set_column_alias(int index, const char* value);
  void set_column_alias(int index, const char* value, size_t size);
  std::string* add_column_alias();
  void add_column_alias(const std::string& value);
  void add_column_alias(std::string&& value);
  void add_column_alias(const char* value);
  void add_column_alias(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_alias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_alias();
  private:
  const std::string& _internal_column_alias(int index) const;
  std::string* _internal_add_column_alias();
  public:

  // string table_alias = 1;
  void clear_table_alias();
  const std::string& table_alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_alias();
  PROTOBUF_NODISCARD std::string* release_table_alias();
  void set_allocated_table_alias(std::string* table_alias);
  private:
  const std::string& _internal_table_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_alias(const std::string& value);
  std::string* _internal_mutable_table_alias();
  public:

  // int32 total_block_count = 3;
  void clear_total_block_count();
  int32_t total_block_count() const;
  void set_total_block_count(int32_t value);
  private:
  int32_t _internal_total_block_count() const;
  void _internal_set_total_block_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest.ResultInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_alias_;
  int32_t total_block_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class SnippetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest) */ {
 public:
  inline SnippetRequest() : SnippetRequest(nullptr) {}
  ~SnippetRequest() override;
  explicit constexpr SnippetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest(const SnippetRequest& from);
  SnippetRequest(SnippetRequest&& from) noexcept
    : SnippetRequest() {
    *this = ::std::move(from);
  }

  inline SnippetRequest& operator=(const SnippetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest& operator=(SnippetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest*>(
               &_SnippetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SnippetRequest& a, SnippetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest";
  }
  protected:
  explicit SnippetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetRequest_Filter Filter;
  typedef SnippetRequest_Projection Projection;
  typedef SnippetRequest_Order Order;
  typedef SnippetRequest_Dependency Dependency;
  typedef SnippetRequest_Limit Limit;
  typedef SnippetRequest_Ref Ref;
  typedef SnippetRequest_QueryInfo QueryInfo;
  typedef SnippetRequest_SchemaInfo SchemaInfo;
  typedef SnippetRequest_SstInfo SstInfo;
  typedef SnippetRequest_WalInfo WalInfo;
  typedef SnippetRequest_ResultInfo ResultInfo;

  typedef SnippetRequest_SnippetType SnippetType;
  static constexpr SnippetType FULL_SCAN =
    SnippetRequest_SnippetType_FULL_SCAN;
  static constexpr SnippetType INDEX_SCAN =
    SnippetRequest_SnippetType_INDEX_SCAN;
  static constexpr SnippetType INDEX_TABLE_SCAN =
    SnippetRequest_SnippetType_INDEX_TABLE_SCAN;
  static constexpr SnippetType AGGREGATION =
    SnippetRequest_SnippetType_AGGREGATION;
  static constexpr SnippetType FILTER =
    SnippetRequest_SnippetType_FILTER;
  static constexpr SnippetType INNER_JOIN =
    SnippetRequest_SnippetType_INNER_JOIN;
  static constexpr SnippetType LEFT_OUTER_JOIN =
    SnippetRequest_SnippetType_LEFT_OUTER_JOIN;
  static constexpr SnippetType RIGHT_OUTER_JOIN =
    SnippetRequest_SnippetType_RIGHT_OUTER_JOIN;
  static constexpr SnippetType CROSS_JOIN =
    SnippetRequest_SnippetType_CROSS_JOIN;
  static constexpr SnippetType UNION =
    SnippetRequest_SnippetType_UNION;
  static constexpr SnippetType IN =
    SnippetRequest_SnippetType_IN;
  static constexpr SnippetType EXIST =
    SnippetRequest_SnippetType_EXIST;
  static constexpr SnippetType DEPENDENCY_INNER_JOIN =
    SnippetRequest_SnippetType_DEPENDENCY_INNER_JOIN;
  static constexpr SnippetType DEPENDENCY_EXIST =
    SnippetRequest_SnippetType_DEPENDENCY_EXIST;
  static constexpr SnippetType DEPENDENCY_IN =
    SnippetRequest_SnippetType_DEPENDENCY_IN;
  static constexpr SnippetType TMAX_SNIPPET =
    SnippetRequest_SnippetType_TMAX_SNIPPET;
  static inline bool SnippetType_IsValid(int value) {
    return SnippetRequest_SnippetType_IsValid(value);
  }
  static constexpr SnippetType SnippetType_MIN =
    SnippetRequest_SnippetType_SnippetType_MIN;
  static constexpr SnippetType SnippetType_MAX =
    SnippetRequest_SnippetType_SnippetType_MAX;
  static constexpr int SnippetType_ARRAYSIZE =
    SnippetRequest_SnippetType_SnippetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SnippetType_descriptor() {
    return SnippetRequest_SnippetType_descriptor();
  }
  template<typename T>
  static inline const std::string& SnippetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SnippetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SnippetType_Name.");
    return SnippetRequest_SnippetType_Name(enum_t_value);
  }
  static inline bool SnippetType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SnippetType* value) {
    return SnippetRequest_SnippetType_Parse(name, value);
  }

  typedef SnippetRequest_ValueType ValueType;
  static constexpr ValueType INT8 =
    SnippetRequest_ValueType_INT8;
  static constexpr ValueType INT16 =
    SnippetRequest_ValueType_INT16;
  static constexpr ValueType INT32 =
    SnippetRequest_ValueType_INT32;
  static constexpr ValueType INT64 =
    SnippetRequest_ValueType_INT64;
  static constexpr ValueType FLOAT32 =
    SnippetRequest_ValueType_FLOAT32;
  static constexpr ValueType DOUBLE =
    SnippetRequest_ValueType_DOUBLE;
  static constexpr ValueType DECIMAL =
    SnippetRequest_ValueType_DECIMAL;
  static constexpr ValueType DATE =
    SnippetRequest_ValueType_DATE;
  static constexpr ValueType TIMESTAMP =
    SnippetRequest_ValueType_TIMESTAMP;
  static constexpr ValueType STRING =
    SnippetRequest_ValueType_STRING;
  static constexpr ValueType COLUMN =
    SnippetRequest_ValueType_COLUMN;
  static constexpr ValueType OPERATOR =
    SnippetRequest_ValueType_OPERATOR;
  static constexpr ValueType BOOLEAN =
    SnippetRequest_ValueType_BOOLEAN;
  static inline bool ValueType_IsValid(int value) {
    return SnippetRequest_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    SnippetRequest_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    SnippetRequest_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    SnippetRequest_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return SnippetRequest_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return SnippetRequest_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ValueType* value) {
    return SnippetRequest_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSstInfoFieldNumber = 6,
    kQueryInfoFieldNumber = 4,
    kSchemaInfoFieldNumber = 5,
    kWalInfoFieldNumber = 7,
    kResultInfoFieldNumber = 8,
    kTypeFieldNumber = 1,
    kQueryIdFieldNumber = 2,
    kWorkIdFieldNumber = 3,
  };
  // repeated .StorageEngineInstance.SnippetRequest.SstInfo sst_info = 6;
  int sst_info_size() const;
  private:
  int _internal_sst_info_size() const;
  public:
  void clear_sst_info();
  ::StorageEngineInstance::SnippetRequest_SstInfo* mutable_sst_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo >*
      mutable_sst_info();
  private:
  const ::StorageEngineInstance::SnippetRequest_SstInfo& _internal_sst_info(int index) const;
  ::StorageEngineInstance::SnippetRequest_SstInfo* _internal_add_sst_info();
  public:
  const ::StorageEngineInstance::SnippetRequest_SstInfo& sst_info(int index) const;
  ::StorageEngineInstance::SnippetRequest_SstInfo* add_sst_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo >&
      sst_info() const;

  // .StorageEngineInstance.SnippetRequest.QueryInfo query_info = 4;
  bool has_query_info() const;
  private:
  bool _internal_has_query_info() const;
  public:
  void clear_query_info();
  const ::StorageEngineInstance::SnippetRequest_QueryInfo& query_info() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_QueryInfo* release_query_info();
  ::StorageEngineInstance::SnippetRequest_QueryInfo* mutable_query_info();
  void set_allocated_query_info(::StorageEngineInstance::SnippetRequest_QueryInfo* query_info);
  private:
  const ::StorageEngineInstance::SnippetRequest_QueryInfo& _internal_query_info() const;
  ::StorageEngineInstance::SnippetRequest_QueryInfo* _internal_mutable_query_info();
  public:
  void unsafe_arena_set_allocated_query_info(
      ::StorageEngineInstance::SnippetRequest_QueryInfo* query_info);
  ::StorageEngineInstance::SnippetRequest_QueryInfo* unsafe_arena_release_query_info();

  // .StorageEngineInstance.SnippetRequest.SchemaInfo schema_info = 5;
  bool has_schema_info() const;
  private:
  bool _internal_has_schema_info() const;
  public:
  void clear_schema_info();
  const ::StorageEngineInstance::SnippetRequest_SchemaInfo& schema_info() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_SchemaInfo* release_schema_info();
  ::StorageEngineInstance::SnippetRequest_SchemaInfo* mutable_schema_info();
  void set_allocated_schema_info(::StorageEngineInstance::SnippetRequest_SchemaInfo* schema_info);
  private:
  const ::StorageEngineInstance::SnippetRequest_SchemaInfo& _internal_schema_info() const;
  ::StorageEngineInstance::SnippetRequest_SchemaInfo* _internal_mutable_schema_info();
  public:
  void unsafe_arena_set_allocated_schema_info(
      ::StorageEngineInstance::SnippetRequest_SchemaInfo* schema_info);
  ::StorageEngineInstance::SnippetRequest_SchemaInfo* unsafe_arena_release_schema_info();

  // .StorageEngineInstance.SnippetRequest.WalInfo wal_info = 7;
  bool has_wal_info() const;
  private:
  bool _internal_has_wal_info() const;
  public:
  void clear_wal_info();
  const ::StorageEngineInstance::SnippetRequest_WalInfo& wal_info() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_WalInfo* release_wal_info();
  ::StorageEngineInstance::SnippetRequest_WalInfo* mutable_wal_info();
  void set_allocated_wal_info(::StorageEngineInstance::SnippetRequest_WalInfo* wal_info);
  private:
  const ::StorageEngineInstance::SnippetRequest_WalInfo& _internal_wal_info() const;
  ::StorageEngineInstance::SnippetRequest_WalInfo* _internal_mutable_wal_info();
  public:
  void unsafe_arena_set_allocated_wal_info(
      ::StorageEngineInstance::SnippetRequest_WalInfo* wal_info);
  ::StorageEngineInstance::SnippetRequest_WalInfo* unsafe_arena_release_wal_info();

  // .StorageEngineInstance.SnippetRequest.ResultInfo result_info = 8;
  bool has_result_info() const;
  private:
  bool _internal_has_result_info() const;
  public:
  void clear_result_info();
  const ::StorageEngineInstance::SnippetRequest_ResultInfo& result_info() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::SnippetRequest_ResultInfo* release_result_info();
  ::StorageEngineInstance::SnippetRequest_ResultInfo* mutable_result_info();
  void set_allocated_result_info(::StorageEngineInstance::SnippetRequest_ResultInfo* result_info);
  private:
  const ::StorageEngineInstance::SnippetRequest_ResultInfo& _internal_result_info() const;
  ::StorageEngineInstance::SnippetRequest_ResultInfo* _internal_mutable_result_info();
  public:
  void unsafe_arena_set_allocated_result_info(
      ::StorageEngineInstance::SnippetRequest_ResultInfo* result_info);
  ::StorageEngineInstance::SnippetRequest_ResultInfo* unsafe_arena_release_result_info();

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  void clear_type();
  ::StorageEngineInstance::SnippetRequest_SnippetType type() const;
  void set_type(::StorageEngineInstance::SnippetRequest_SnippetType value);
  private:
  ::StorageEngineInstance::SnippetRequest_SnippetType _internal_type() const;
  void _internal_set_type(::StorageEngineInstance::SnippetRequest_SnippetType value);
  public:

  // int32 query_id = 2;
  void clear_query_id();
  int32_t query_id() const;
  void set_query_id(int32_t value);
  private:
  int32_t _internal_query_id() const;
  void _internal_set_query_id(int32_t value);
  public:

  // int32 work_id = 3;
  void clear_work_id();
  int32_t work_id() const;
  void set_work_id(int32_t value);
  private:
  int32_t _internal_work_id() const;
  void _internal_set_work_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo > sst_info_;
  ::StorageEngineInstance::SnippetRequest_QueryInfo* query_info_;
  ::StorageEngineInstance::SnippetRequest_SchemaInfo* schema_info_;
  ::StorageEngineInstance::SnippetRequest_WalInfo* wal_info_;
  ::StorageEngineInstance::SnippetRequest_ResultInfo* result_info_;
  int type_;
  int32_t query_id_;
  int32_t work_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class QueryStringResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.QueryStringResult) */ {
 public:
  inline QueryStringResult() : QueryStringResult(nullptr) {}
  ~QueryStringResult() override;
  explicit constexpr QueryStringResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryStringResult(const QueryStringResult& from);
  QueryStringResult(QueryStringResult&& from) noexcept
    : QueryStringResult() {
    *this = ::std::move(from);
  }

  inline QueryStringResult& operator=(const QueryStringResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryStringResult& operator=(QueryStringResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryStringResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryStringResult* internal_default_instance() {
    return reinterpret_cast<const QueryStringResult*>(
               &_QueryStringResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryStringResult& a, QueryStringResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryStringResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryStringResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryStringResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryStringResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryStringResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryStringResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryStringResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.QueryStringResult";
  }
  protected:
  explicit QueryStringResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryResultFieldNumber = 1,
    kScannedRowCountFieldNumber = 2,
    kFilteredRowCountFieldNumber = 3,
  };
  // string query_result = 1;
  void clear_query_result();
  const std::string& query_result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query_result();
  PROTOBUF_NODISCARD std::string* release_query_result();
  void set_allocated_query_result(std::string* query_result);
  private:
  const std::string& _internal_query_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query_result(const std::string& value);
  std::string* _internal_mutable_query_result();
  public:

  // int32 scanned_row_count = 2;
  void clear_scanned_row_count();
  int32_t scanned_row_count() const;
  void set_scanned_row_count(int32_t value);
  private:
  int32_t _internal_scanned_row_count() const;
  void _internal_set_scanned_row_count(int32_t value);
  public:

  // int32 filtered_row_count = 3;
  void clear_filtered_row_count();
  int32_t filtered_row_count() const;
  void set_filtered_row_count(int32_t value);
  private:
  int32_t _internal_filtered_row_count() const;
  void _internal_set_filtered_row_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.QueryStringResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_result_;
  int32_t scanned_row_count_;
  int32_t filtered_row_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnippetRequest_Filter_FilterValue

// repeated .StorageEngineInstance.SnippetRequest.ValueType type = 1;
inline int SnippetRequest_Filter_FilterValue::_internal_type_size() const {
  return type_.size();
}
inline int SnippetRequest_Filter_FilterValue::type_size() const {
  return _internal_type_size();
}
inline void SnippetRequest_Filter_FilterValue::clear_type() {
  type_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_ValueType SnippetRequest_Filter_FilterValue::_internal_type(int index) const {
  return static_cast< ::StorageEngineInstance::SnippetRequest_ValueType >(type_.Get(index));
}
inline ::StorageEngineInstance::SnippetRequest_ValueType SnippetRequest_Filter_FilterValue::type(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Filter.FilterValue.type)
  return _internal_type(index);
}
inline void SnippetRequest_Filter_FilterValue::set_type(int index, ::StorageEngineInstance::SnippetRequest_ValueType value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Filter.FilterValue.type)
}
inline void SnippetRequest_Filter_FilterValue::_internal_add_type(::StorageEngineInstance::SnippetRequest_ValueType value) {
  type_.Add(value);
}
inline void SnippetRequest_Filter_FilterValue::add_type(::StorageEngineInstance::SnippetRequest_ValueType value) {
  _internal_add_type(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Filter.FilterValue.type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SnippetRequest_Filter_FilterValue::type() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.Filter.FilterValue.type)
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SnippetRequest_Filter_FilterValue::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SnippetRequest_Filter_FilterValue::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.Filter.FilterValue.type)
  return _internal_mutable_type();
}

// repeated string value = 2;
inline int SnippetRequest_Filter_FilterValue::_internal_value_size() const {
  return value_.size();
}
inline int SnippetRequest_Filter_FilterValue::value_size() const {
  return _internal_value_size();
}
inline void SnippetRequest_Filter_FilterValue::clear_value() {
  value_.Clear();
}
inline std::string* SnippetRequest_Filter_FilterValue::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
  return _s;
}
inline const std::string& SnippetRequest_Filter_FilterValue::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& SnippetRequest_Filter_FilterValue::value(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
  return _internal_value(index);
}
inline std::string* SnippetRequest_Filter_FilterValue::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
  return value_.Mutable(index);
}
inline void SnippetRequest_Filter_FilterValue::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
}
inline void SnippetRequest_Filter_FilterValue::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
}
inline void SnippetRequest_Filter_FilterValue::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
}
inline void SnippetRequest_Filter_FilterValue::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
}
inline std::string* SnippetRequest_Filter_FilterValue::_internal_add_value() {
  return value_.Add();
}
inline void SnippetRequest_Filter_FilterValue::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
}
inline void SnippetRequest_Filter_FilterValue::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
}
inline void SnippetRequest_Filter_FilterValue::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
}
inline void SnippetRequest_Filter_FilterValue::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetRequest_Filter_FilterValue::value() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetRequest_Filter_FilterValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.Filter.FilterValue.value)
  return &value_;
}

// -------------------------------------------------------------------

// SnippetRequest_Filter

// .StorageEngineInstance.SnippetRequest.Filter.FilterValue lv = 1;
inline bool SnippetRequest_Filter::_internal_has_lv() const {
  return this != internal_default_instance() && lv_ != nullptr;
}
inline bool SnippetRequest_Filter::has_lv() const {
  return _internal_has_lv();
}
inline void SnippetRequest_Filter::clear_lv() {
  if (GetArenaForAllocation() == nullptr && lv_ != nullptr) {
    delete lv_;
  }
  lv_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& SnippetRequest_Filter::_internal_lv() const {
  const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* p = lv_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue&>(
      ::StorageEngineInstance::_SnippetRequest_Filter_FilterValue_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& SnippetRequest_Filter::lv() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Filter.lv)
  return _internal_lv();
}
inline void SnippetRequest_Filter::unsafe_arena_set_allocated_lv(
    ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* lv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lv_);
  }
  lv_ = lv;
  if (lv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.Filter.lv)
}
inline ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* SnippetRequest_Filter::release_lv() {
  
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* temp = lv_;
  lv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* SnippetRequest_Filter::unsafe_arena_release_lv() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.Filter.lv)
  
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* temp = lv_;
  lv_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* SnippetRequest_Filter::_internal_mutable_lv() {
  
  if (lv_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Filter_FilterValue>(GetArenaForAllocation());
    lv_ = p;
  }
  return lv_;
}
inline ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* SnippetRequest_Filter::mutable_lv() {
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* _msg = _internal_mutable_lv();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.Filter.lv)
  return _msg;
}
inline void SnippetRequest_Filter::set_allocated_lv(::StorageEngineInstance::SnippetRequest_Filter_FilterValue* lv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lv_;
  }
  if (lv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_Filter_FilterValue>::GetOwningArena(lv);
    if (message_arena != submessage_arena) {
      lv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lv, submessage_arena);
    }
    
  } else {
    
  }
  lv_ = lv;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.Filter.lv)
}

// .StorageEngineInstance.SnippetRequest.Filter.OperType operator = 2;
inline void SnippetRequest_Filter::clear_operator_() {
  operator__ = 0;
}
inline ::StorageEngineInstance::SnippetRequest_Filter_OperType SnippetRequest_Filter::_internal_operator_() const {
  return static_cast< ::StorageEngineInstance::SnippetRequest_Filter_OperType >(operator__);
}
inline ::StorageEngineInstance::SnippetRequest_Filter_OperType SnippetRequest_Filter::operator_() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Filter.operator)
  return _internal_operator_();
}
inline void SnippetRequest_Filter::_internal_set_operator_(::StorageEngineInstance::SnippetRequest_Filter_OperType value) {
  
  operator__ = value;
}
inline void SnippetRequest_Filter::set_operator_(::StorageEngineInstance::SnippetRequest_Filter_OperType value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Filter.operator)
}

// .StorageEngineInstance.SnippetRequest.Filter.FilterValue rv = 3;
inline bool SnippetRequest_Filter::_internal_has_rv() const {
  return this != internal_default_instance() && rv_ != nullptr;
}
inline bool SnippetRequest_Filter::has_rv() const {
  return _internal_has_rv();
}
inline void SnippetRequest_Filter::clear_rv() {
  if (GetArenaForAllocation() == nullptr && rv_ != nullptr) {
    delete rv_;
  }
  rv_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& SnippetRequest_Filter::_internal_rv() const {
  const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* p = rv_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue&>(
      ::StorageEngineInstance::_SnippetRequest_Filter_FilterValue_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& SnippetRequest_Filter::rv() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Filter.rv)
  return _internal_rv();
}
inline void SnippetRequest_Filter::unsafe_arena_set_allocated_rv(
    ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* rv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rv_);
  }
  rv_ = rv;
  if (rv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.Filter.rv)
}
inline ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* SnippetRequest_Filter::release_rv() {
  
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* temp = rv_;
  rv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* SnippetRequest_Filter::unsafe_arena_release_rv() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.Filter.rv)
  
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* temp = rv_;
  rv_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* SnippetRequest_Filter::_internal_mutable_rv() {
  
  if (rv_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Filter_FilterValue>(GetArenaForAllocation());
    rv_ = p;
  }
  return rv_;
}
inline ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* SnippetRequest_Filter::mutable_rv() {
  ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* _msg = _internal_mutable_rv();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.Filter.rv)
  return _msg;
}
inline void SnippetRequest_Filter::set_allocated_rv(::StorageEngineInstance::SnippetRequest_Filter_FilterValue* rv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rv_;
  }
  if (rv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_Filter_FilterValue>::GetOwningArena(rv);
    if (message_arena != submessage_arena) {
      rv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rv, submessage_arena);
    }
    
  } else {
    
  }
  rv_ = rv;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.Filter.rv)
}

// -------------------------------------------------------------------

// SnippetRequest_Projection

// .StorageEngineInstance.SnippetRequest.Projection.SelectType select_type = 1;
inline void SnippetRequest_Projection::clear_select_type() {
  select_type_ = 0;
}
inline ::StorageEngineInstance::SnippetRequest_Projection_SelectType SnippetRequest_Projection::_internal_select_type() const {
  return static_cast< ::StorageEngineInstance::SnippetRequest_Projection_SelectType >(select_type_);
}
inline ::StorageEngineInstance::SnippetRequest_Projection_SelectType SnippetRequest_Projection::select_type() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Projection.select_type)
  return _internal_select_type();
}
inline void SnippetRequest_Projection::_internal_set_select_type(::StorageEngineInstance::SnippetRequest_Projection_SelectType value) {
  
  select_type_ = value;
}
inline void SnippetRequest_Projection::set_select_type(::StorageEngineInstance::SnippetRequest_Projection_SelectType value) {
  _internal_set_select_type(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Projection.select_type)
}

// repeated string value = 2;
inline int SnippetRequest_Projection::_internal_value_size() const {
  return value_.size();
}
inline int SnippetRequest_Projection::value_size() const {
  return _internal_value_size();
}
inline void SnippetRequest_Projection::clear_value() {
  value_.Clear();
}
inline std::string* SnippetRequest_Projection::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetRequest.Projection.value)
  return _s;
}
inline const std::string& SnippetRequest_Projection::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& SnippetRequest_Projection::value(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Projection.value)
  return _internal_value(index);
}
inline std::string* SnippetRequest_Projection::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.Projection.value)
  return value_.Mutable(index);
}
inline void SnippetRequest_Projection::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Projection.value)
}
inline void SnippetRequest_Projection::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Projection.value)
}
inline void SnippetRequest_Projection::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetRequest.Projection.value)
}
inline void SnippetRequest_Projection::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetRequest.Projection.value)
}
inline std::string* SnippetRequest_Projection::_internal_add_value() {
  return value_.Add();
}
inline void SnippetRequest_Projection::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Projection.value)
}
inline void SnippetRequest_Projection::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Projection.value)
}
inline void SnippetRequest_Projection::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetRequest.Projection.value)
}
inline void SnippetRequest_Projection::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetRequest.Projection.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetRequest_Projection::value() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.Projection.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetRequest_Projection::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.Projection.value)
  return &value_;
}

// repeated .StorageEngineInstance.SnippetRequest.ValueType value_type = 3;
inline int SnippetRequest_Projection::_internal_value_type_size() const {
  return value_type_.size();
}
inline int SnippetRequest_Projection::value_type_size() const {
  return _internal_value_type_size();
}
inline void SnippetRequest_Projection::clear_value_type() {
  value_type_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_ValueType SnippetRequest_Projection::_internal_value_type(int index) const {
  return static_cast< ::StorageEngineInstance::SnippetRequest_ValueType >(value_type_.Get(index));
}
inline ::StorageEngineInstance::SnippetRequest_ValueType SnippetRequest_Projection::value_type(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Projection.value_type)
  return _internal_value_type(index);
}
inline void SnippetRequest_Projection::set_value_type(int index, ::StorageEngineInstance::SnippetRequest_ValueType value) {
  value_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Projection.value_type)
}
inline void SnippetRequest_Projection::_internal_add_value_type(::StorageEngineInstance::SnippetRequest_ValueType value) {
  value_type_.Add(value);
}
inline void SnippetRequest_Projection::add_value_type(::StorageEngineInstance::SnippetRequest_ValueType value) {
  _internal_add_value_type(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Projection.value_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SnippetRequest_Projection::value_type() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.Projection.value_type)
  return value_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SnippetRequest_Projection::_internal_mutable_value_type() {
  return &value_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SnippetRequest_Projection::mutable_value_type() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.Projection.value_type)
  return _internal_mutable_value_type();
}

// -------------------------------------------------------------------

// SnippetRequest_Order

// repeated .StorageEngineInstance.SnippetRequest.Order.OrderDirection ascending = 1;
inline int SnippetRequest_Order::_internal_ascending_size() const {
  return ascending_.size();
}
inline int SnippetRequest_Order::ascending_size() const {
  return _internal_ascending_size();
}
inline void SnippetRequest_Order::clear_ascending() {
  ascending_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_Order_OrderDirection SnippetRequest_Order::_internal_ascending(int index) const {
  return static_cast< ::StorageEngineInstance::SnippetRequest_Order_OrderDirection >(ascending_.Get(index));
}
inline ::StorageEngineInstance::SnippetRequest_Order_OrderDirection SnippetRequest_Order::ascending(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Order.ascending)
  return _internal_ascending(index);
}
inline void SnippetRequest_Order::set_ascending(int index, ::StorageEngineInstance::SnippetRequest_Order_OrderDirection value) {
  ascending_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Order.ascending)
}
inline void SnippetRequest_Order::_internal_add_ascending(::StorageEngineInstance::SnippetRequest_Order_OrderDirection value) {
  ascending_.Add(value);
}
inline void SnippetRequest_Order::add_ascending(::StorageEngineInstance::SnippetRequest_Order_OrderDirection value) {
  _internal_add_ascending(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Order.ascending)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SnippetRequest_Order::ascending() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.Order.ascending)
  return ascending_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SnippetRequest_Order::_internal_mutable_ascending() {
  return &ascending_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SnippetRequest_Order::mutable_ascending() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.Order.ascending)
  return _internal_mutable_ascending();
}

// repeated string column_name = 2;
inline int SnippetRequest_Order::_internal_column_name_size() const {
  return column_name_.size();
}
inline int SnippetRequest_Order::column_name_size() const {
  return _internal_column_name_size();
}
inline void SnippetRequest_Order::clear_column_name() {
  column_name_.Clear();
}
inline std::string* SnippetRequest_Order::add_column_name() {
  std::string* _s = _internal_add_column_name();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetRequest.Order.column_name)
  return _s;
}
inline const std::string& SnippetRequest_Order::_internal_column_name(int index) const {
  return column_name_.Get(index);
}
inline const std::string& SnippetRequest_Order::column_name(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Order.column_name)
  return _internal_column_name(index);
}
inline std::string* SnippetRequest_Order::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.Order.column_name)
  return column_name_.Mutable(index);
}
inline void SnippetRequest_Order::set_column_name(int index, const std::string& value) {
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Order.column_name)
}
inline void SnippetRequest_Order::set_column_name(int index, std::string&& value) {
  column_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Order.column_name)
}
inline void SnippetRequest_Order::set_column_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetRequest.Order.column_name)
}
inline void SnippetRequest_Order::set_column_name(int index, const char* value, size_t size) {
  column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetRequest.Order.column_name)
}
inline std::string* SnippetRequest_Order::_internal_add_column_name() {
  return column_name_.Add();
}
inline void SnippetRequest_Order::add_column_name(const std::string& value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Order.column_name)
}
inline void SnippetRequest_Order::add_column_name(std::string&& value) {
  column_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Order.column_name)
}
inline void SnippetRequest_Order::add_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetRequest.Order.column_name)
}
inline void SnippetRequest_Order::add_column_name(const char* value, size_t size) {
  column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetRequest.Order.column_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetRequest_Order::column_name() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.Order.column_name)
  return column_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetRequest_Order::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.Order.column_name)
  return &column_name_;
}

// -------------------------------------------------------------------

// SnippetRequest_Dependency

// repeated .StorageEngineInstance.SnippetRequest.Projection dependency_projection = 1;
inline int SnippetRequest_Dependency::_internal_dependency_projection_size() const {
  return dependency_projection_.size();
}
inline int SnippetRequest_Dependency::dependency_projection_size() const {
  return _internal_dependency_projection_size();
}
inline void SnippetRequest_Dependency::clear_dependency_projection() {
  dependency_projection_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_Projection* SnippetRequest_Dependency::mutable_dependency_projection(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.Dependency.dependency_projection)
  return dependency_projection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection >*
SnippetRequest_Dependency::mutable_dependency_projection() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.Dependency.dependency_projection)
  return &dependency_projection_;
}
inline const ::StorageEngineInstance::SnippetRequest_Projection& SnippetRequest_Dependency::_internal_dependency_projection(int index) const {
  return dependency_projection_.Get(index);
}
inline const ::StorageEngineInstance::SnippetRequest_Projection& SnippetRequest_Dependency::dependency_projection(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Dependency.dependency_projection)
  return _internal_dependency_projection(index);
}
inline ::StorageEngineInstance::SnippetRequest_Projection* SnippetRequest_Dependency::_internal_add_dependency_projection() {
  return dependency_projection_.Add();
}
inline ::StorageEngineInstance::SnippetRequest_Projection* SnippetRequest_Dependency::add_dependency_projection() {
  ::StorageEngineInstance::SnippetRequest_Projection* _add = _internal_add_dependency_projection();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Dependency.dependency_projection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection >&
SnippetRequest_Dependency::dependency_projection() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.Dependency.dependency_projection)
  return dependency_projection_;
}

// repeated .StorageEngineInstance.SnippetRequest.Filter dependency_filter = 2;
inline int SnippetRequest_Dependency::_internal_dependency_filter_size() const {
  return dependency_filter_.size();
}
inline int SnippetRequest_Dependency::dependency_filter_size() const {
  return _internal_dependency_filter_size();
}
inline void SnippetRequest_Dependency::clear_dependency_filter() {
  dependency_filter_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_Filter* SnippetRequest_Dependency::mutable_dependency_filter(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.Dependency.dependency_filter)
  return dependency_filter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >*
SnippetRequest_Dependency::mutable_dependency_filter() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.Dependency.dependency_filter)
  return &dependency_filter_;
}
inline const ::StorageEngineInstance::SnippetRequest_Filter& SnippetRequest_Dependency::_internal_dependency_filter(int index) const {
  return dependency_filter_.Get(index);
}
inline const ::StorageEngineInstance::SnippetRequest_Filter& SnippetRequest_Dependency::dependency_filter(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Dependency.dependency_filter)
  return _internal_dependency_filter(index);
}
inline ::StorageEngineInstance::SnippetRequest_Filter* SnippetRequest_Dependency::_internal_add_dependency_filter() {
  return dependency_filter_.Add();
}
inline ::StorageEngineInstance::SnippetRequest_Filter* SnippetRequest_Dependency::add_dependency_filter() {
  ::StorageEngineInstance::SnippetRequest_Filter* _add = _internal_add_dependency_filter();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.Dependency.dependency_filter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >&
SnippetRequest_Dependency::dependency_filter() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.Dependency.dependency_filter)
  return dependency_filter_;
}

// -------------------------------------------------------------------

// SnippetRequest_Limit

// int32 offset = 1;
inline void SnippetRequest_Limit::clear_offset() {
  offset_ = 0;
}
inline int32_t SnippetRequest_Limit::_internal_offset() const {
  return offset_;
}
inline int32_t SnippetRequest_Limit::offset() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Limit.offset)
  return _internal_offset();
}
inline void SnippetRequest_Limit::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void SnippetRequest_Limit::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Limit.offset)
}

// int32 length = 2;
inline void SnippetRequest_Limit::clear_length() {
  length_ = 0;
}
inline int32_t SnippetRequest_Limit::_internal_length() const {
  return length_;
}
inline int32_t SnippetRequest_Limit::length() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Limit.length)
  return _internal_length();
}
inline void SnippetRequest_Limit::_internal_set_length(int32_t value) {
  
  length_ = value;
}
inline void SnippetRequest_Limit::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Limit.length)
}

// -------------------------------------------------------------------

// SnippetRequest_Ref

// string table_name = 1;
inline void SnippetRequest_Ref::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& SnippetRequest_Ref::table_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Ref.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnippetRequest_Ref::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Ref.table_name)
}
inline std::string* SnippetRequest_Ref::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.Ref.table_name)
  return _s;
}
inline const std::string& SnippetRequest_Ref::_internal_table_name() const {
  return table_name_.Get();
}
inline void SnippetRequest_Ref::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnippetRequest_Ref::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnippetRequest_Ref::release_table_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.Ref.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnippetRequest_Ref::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.Ref.table_name)
}

// string column_name = 2;
inline void SnippetRequest_Ref::clear_column_name() {
  column_name_.ClearToEmpty();
}
inline const std::string& SnippetRequest_Ref::column_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.Ref.column_name)
  return _internal_column_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnippetRequest_Ref::set_column_name(ArgT0&& arg0, ArgT... args) {
 
 column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.Ref.column_name)
}
inline std::string* SnippetRequest_Ref::mutable_column_name() {
  std::string* _s = _internal_mutable_column_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.Ref.column_name)
  return _s;
}
inline const std::string& SnippetRequest_Ref::_internal_column_name() const {
  return column_name_.Get();
}
inline void SnippetRequest_Ref::_internal_set_column_name(const std::string& value) {
  
  column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnippetRequest_Ref::_internal_mutable_column_name() {
  
  return column_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnippetRequest_Ref::release_column_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.Ref.column_name)
  return column_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnippetRequest_Ref::set_allocated_column_name(std::string* column_name) {
  if (column_name != nullptr) {
    
  } else {
    
  }
  column_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (column_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    column_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.Ref.column_name)
}

// -------------------------------------------------------------------

// SnippetRequest_QueryInfo

// repeated string table_name = 1;
inline int SnippetRequest_QueryInfo::_internal_table_name_size() const {
  return table_name_.size();
}
inline int SnippetRequest_QueryInfo::table_name_size() const {
  return _internal_table_name_size();
}
inline void SnippetRequest_QueryInfo::clear_table_name() {
  table_name_.Clear();
}
inline std::string* SnippetRequest_QueryInfo::add_table_name() {
  std::string* _s = _internal_add_table_name();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
  return _s;
}
inline const std::string& SnippetRequest_QueryInfo::_internal_table_name(int index) const {
  return table_name_.Get(index);
}
inline const std::string& SnippetRequest_QueryInfo::table_name(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
  return _internal_table_name(index);
}
inline std::string* SnippetRequest_QueryInfo::mutable_table_name(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
  return table_name_.Mutable(index);
}
inline void SnippetRequest_QueryInfo::set_table_name(int index, const std::string& value) {
  table_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
}
inline void SnippetRequest_QueryInfo::set_table_name(int index, std::string&& value) {
  table_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
}
inline void SnippetRequest_QueryInfo::set_table_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
}
inline void SnippetRequest_QueryInfo::set_table_name(int index, const char* value, size_t size) {
  table_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
}
inline std::string* SnippetRequest_QueryInfo::_internal_add_table_name() {
  return table_name_.Add();
}
inline void SnippetRequest_QueryInfo::add_table_name(const std::string& value) {
  table_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
}
inline void SnippetRequest_QueryInfo::add_table_name(std::string&& value) {
  table_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
}
inline void SnippetRequest_QueryInfo::add_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
}
inline void SnippetRequest_QueryInfo::add_table_name(const char* value, size_t size) {
  table_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetRequest_QueryInfo::table_name() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
  return table_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetRequest_QueryInfo::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.QueryInfo.table_name)
  return &table_name_;
}

// repeated .StorageEngineInstance.SnippetRequest.Filter filtering = 2;
inline int SnippetRequest_QueryInfo::_internal_filtering_size() const {
  return filtering_.size();
}
inline int SnippetRequest_QueryInfo::filtering_size() const {
  return _internal_filtering_size();
}
inline void SnippetRequest_QueryInfo::clear_filtering() {
  filtering_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_Filter* SnippetRequest_QueryInfo::mutable_filtering(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.filtering)
  return filtering_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >*
SnippetRequest_QueryInfo::mutable_filtering() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.QueryInfo.filtering)
  return &filtering_;
}
inline const ::StorageEngineInstance::SnippetRequest_Filter& SnippetRequest_QueryInfo::_internal_filtering(int index) const {
  return filtering_.Get(index);
}
inline const ::StorageEngineInstance::SnippetRequest_Filter& SnippetRequest_QueryInfo::filtering(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.QueryInfo.filtering)
  return _internal_filtering(index);
}
inline ::StorageEngineInstance::SnippetRequest_Filter* SnippetRequest_QueryInfo::_internal_add_filtering() {
  return filtering_.Add();
}
inline ::StorageEngineInstance::SnippetRequest_Filter* SnippetRequest_QueryInfo::add_filtering() {
  ::StorageEngineInstance::SnippetRequest_Filter* _add = _internal_add_filtering();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.QueryInfo.filtering)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >&
SnippetRequest_QueryInfo::filtering() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.QueryInfo.filtering)
  return filtering_;
}

// repeated .StorageEngineInstance.SnippetRequest.Projection projection = 3;
inline int SnippetRequest_QueryInfo::_internal_projection_size() const {
  return projection_.size();
}
inline int SnippetRequest_QueryInfo::projection_size() const {
  return _internal_projection_size();
}
inline void SnippetRequest_QueryInfo::clear_projection() {
  projection_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_Projection* SnippetRequest_QueryInfo::mutable_projection(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.projection)
  return projection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection >*
SnippetRequest_QueryInfo::mutable_projection() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.QueryInfo.projection)
  return &projection_;
}
inline const ::StorageEngineInstance::SnippetRequest_Projection& SnippetRequest_QueryInfo::_internal_projection(int index) const {
  return projection_.Get(index);
}
inline const ::StorageEngineInstance::SnippetRequest_Projection& SnippetRequest_QueryInfo::projection(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.QueryInfo.projection)
  return _internal_projection(index);
}
inline ::StorageEngineInstance::SnippetRequest_Projection* SnippetRequest_QueryInfo::_internal_add_projection() {
  return projection_.Add();
}
inline ::StorageEngineInstance::SnippetRequest_Projection* SnippetRequest_QueryInfo::add_projection() {
  ::StorageEngineInstance::SnippetRequest_Projection* _add = _internal_add_projection();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.QueryInfo.projection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Projection >&
SnippetRequest_QueryInfo::projection() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.QueryInfo.projection)
  return projection_;
}

// repeated .StorageEngineInstance.SnippetRequest.Filter having = 4;
inline int SnippetRequest_QueryInfo::_internal_having_size() const {
  return having_.size();
}
inline int SnippetRequest_QueryInfo::having_size() const {
  return _internal_having_size();
}
inline void SnippetRequest_QueryInfo::clear_having() {
  having_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_Filter* SnippetRequest_QueryInfo::mutable_having(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.having)
  return having_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >*
SnippetRequest_QueryInfo::mutable_having() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.QueryInfo.having)
  return &having_;
}
inline const ::StorageEngineInstance::SnippetRequest_Filter& SnippetRequest_QueryInfo::_internal_having(int index) const {
  return having_.Get(index);
}
inline const ::StorageEngineInstance::SnippetRequest_Filter& SnippetRequest_QueryInfo::having(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.QueryInfo.having)
  return _internal_having(index);
}
inline ::StorageEngineInstance::SnippetRequest_Filter* SnippetRequest_QueryInfo::_internal_add_having() {
  return having_.Add();
}
inline ::StorageEngineInstance::SnippetRequest_Filter* SnippetRequest_QueryInfo::add_having() {
  ::StorageEngineInstance::SnippetRequest_Filter* _add = _internal_add_having();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.QueryInfo.having)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_Filter >&
SnippetRequest_QueryInfo::having() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.QueryInfo.having)
  return having_;
}

// repeated string group_by = 5;
inline int SnippetRequest_QueryInfo::_internal_group_by_size() const {
  return group_by_.size();
}
inline int SnippetRequest_QueryInfo::group_by_size() const {
  return _internal_group_by_size();
}
inline void SnippetRequest_QueryInfo::clear_group_by() {
  group_by_.Clear();
}
inline std::string* SnippetRequest_QueryInfo::add_group_by() {
  std::string* _s = _internal_add_group_by();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
  return _s;
}
inline const std::string& SnippetRequest_QueryInfo::_internal_group_by(int index) const {
  return group_by_.Get(index);
}
inline const std::string& SnippetRequest_QueryInfo::group_by(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
  return _internal_group_by(index);
}
inline std::string* SnippetRequest_QueryInfo::mutable_group_by(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
  return group_by_.Mutable(index);
}
inline void SnippetRequest_QueryInfo::set_group_by(int index, const std::string& value) {
  group_by_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
}
inline void SnippetRequest_QueryInfo::set_group_by(int index, std::string&& value) {
  group_by_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
}
inline void SnippetRequest_QueryInfo::set_group_by(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
}
inline void SnippetRequest_QueryInfo::set_group_by(int index, const char* value, size_t size) {
  group_by_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
}
inline std::string* SnippetRequest_QueryInfo::_internal_add_group_by() {
  return group_by_.Add();
}
inline void SnippetRequest_QueryInfo::add_group_by(const std::string& value) {
  group_by_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
}
inline void SnippetRequest_QueryInfo::add_group_by(std::string&& value) {
  group_by_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
}
inline void SnippetRequest_QueryInfo::add_group_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
}
inline void SnippetRequest_QueryInfo::add_group_by(const char* value, size_t size) {
  group_by_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetRequest_QueryInfo::group_by() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
  return group_by_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetRequest_QueryInfo::mutable_group_by() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.QueryInfo.group_by)
  return &group_by_;
}

// .StorageEngineInstance.SnippetRequest.Order order_by = 6;
inline bool SnippetRequest_QueryInfo::_internal_has_order_by() const {
  return this != internal_default_instance() && order_by_ != nullptr;
}
inline bool SnippetRequest_QueryInfo::has_order_by() const {
  return _internal_has_order_by();
}
inline void SnippetRequest_QueryInfo::clear_order_by() {
  if (GetArenaForAllocation() == nullptr && order_by_ != nullptr) {
    delete order_by_;
  }
  order_by_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_Order& SnippetRequest_QueryInfo::_internal_order_by() const {
  const ::StorageEngineInstance::SnippetRequest_Order* p = order_by_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_Order&>(
      ::StorageEngineInstance::_SnippetRequest_Order_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_Order& SnippetRequest_QueryInfo::order_by() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.QueryInfo.order_by)
  return _internal_order_by();
}
inline void SnippetRequest_QueryInfo::unsafe_arena_set_allocated_order_by(
    ::StorageEngineInstance::SnippetRequest_Order* order_by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_by_);
  }
  order_by_ = order_by;
  if (order_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.QueryInfo.order_by)
}
inline ::StorageEngineInstance::SnippetRequest_Order* SnippetRequest_QueryInfo::release_order_by() {
  
  ::StorageEngineInstance::SnippetRequest_Order* temp = order_by_;
  order_by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Order* SnippetRequest_QueryInfo::unsafe_arena_release_order_by() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.QueryInfo.order_by)
  
  ::StorageEngineInstance::SnippetRequest_Order* temp = order_by_;
  order_by_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Order* SnippetRequest_QueryInfo::_internal_mutable_order_by() {
  
  if (order_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Order>(GetArenaForAllocation());
    order_by_ = p;
  }
  return order_by_;
}
inline ::StorageEngineInstance::SnippetRequest_Order* SnippetRequest_QueryInfo::mutable_order_by() {
  ::StorageEngineInstance::SnippetRequest_Order* _msg = _internal_mutable_order_by();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.order_by)
  return _msg;
}
inline void SnippetRequest_QueryInfo::set_allocated_order_by(::StorageEngineInstance::SnippetRequest_Order* order_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete order_by_;
  }
  if (order_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_Order>::GetOwningArena(order_by);
    if (message_arena != submessage_arena) {
      order_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_by, submessage_arena);
    }
    
  } else {
    
  }
  order_by_ = order_by;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.QueryInfo.order_by)
}

// .StorageEngineInstance.SnippetRequest.Limit limit = 7;
inline bool SnippetRequest_QueryInfo::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool SnippetRequest_QueryInfo::has_limit() const {
  return _internal_has_limit();
}
inline void SnippetRequest_QueryInfo::clear_limit() {
  if (GetArenaForAllocation() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_Limit& SnippetRequest_QueryInfo::_internal_limit() const {
  const ::StorageEngineInstance::SnippetRequest_Limit* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_Limit&>(
      ::StorageEngineInstance::_SnippetRequest_Limit_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_Limit& SnippetRequest_QueryInfo::limit() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.QueryInfo.limit)
  return _internal_limit();
}
inline void SnippetRequest_QueryInfo::unsafe_arena_set_allocated_limit(
    ::StorageEngineInstance::SnippetRequest_Limit* limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.QueryInfo.limit)
}
inline ::StorageEngineInstance::SnippetRequest_Limit* SnippetRequest_QueryInfo::release_limit() {
  
  ::StorageEngineInstance::SnippetRequest_Limit* temp = limit_;
  limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Limit* SnippetRequest_QueryInfo::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.QueryInfo.limit)
  
  ::StorageEngineInstance::SnippetRequest_Limit* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Limit* SnippetRequest_QueryInfo::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Limit>(GetArenaForAllocation());
    limit_ = p;
  }
  return limit_;
}
inline ::StorageEngineInstance::SnippetRequest_Limit* SnippetRequest_QueryInfo::mutable_limit() {
  ::StorageEngineInstance::SnippetRequest_Limit* _msg = _internal_mutable_limit();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.limit)
  return _msg;
}
inline void SnippetRequest_QueryInfo::set_allocated_limit(::StorageEngineInstance::SnippetRequest_Limit* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete limit_;
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_Limit>::GetOwningArena(limit);
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.QueryInfo.limit)
}

// .StorageEngineInstance.SnippetRequest.Dependency dependency = 8;
inline bool SnippetRequest_QueryInfo::_internal_has_dependency() const {
  return this != internal_default_instance() && dependency_ != nullptr;
}
inline bool SnippetRequest_QueryInfo::has_dependency() const {
  return _internal_has_dependency();
}
inline void SnippetRequest_QueryInfo::clear_dependency() {
  if (GetArenaForAllocation() == nullptr && dependency_ != nullptr) {
    delete dependency_;
  }
  dependency_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_Dependency& SnippetRequest_QueryInfo::_internal_dependency() const {
  const ::StorageEngineInstance::SnippetRequest_Dependency* p = dependency_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_Dependency&>(
      ::StorageEngineInstance::_SnippetRequest_Dependency_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_Dependency& SnippetRequest_QueryInfo::dependency() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.QueryInfo.dependency)
  return _internal_dependency();
}
inline void SnippetRequest_QueryInfo::unsafe_arena_set_allocated_dependency(
    ::StorageEngineInstance::SnippetRequest_Dependency* dependency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dependency_);
  }
  dependency_ = dependency;
  if (dependency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.QueryInfo.dependency)
}
inline ::StorageEngineInstance::SnippetRequest_Dependency* SnippetRequest_QueryInfo::release_dependency() {
  
  ::StorageEngineInstance::SnippetRequest_Dependency* temp = dependency_;
  dependency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Dependency* SnippetRequest_QueryInfo::unsafe_arena_release_dependency() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.QueryInfo.dependency)
  
  ::StorageEngineInstance::SnippetRequest_Dependency* temp = dependency_;
  dependency_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Dependency* SnippetRequest_QueryInfo::_internal_mutable_dependency() {
  
  if (dependency_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Dependency>(GetArenaForAllocation());
    dependency_ = p;
  }
  return dependency_;
}
inline ::StorageEngineInstance::SnippetRequest_Dependency* SnippetRequest_QueryInfo::mutable_dependency() {
  ::StorageEngineInstance::SnippetRequest_Dependency* _msg = _internal_mutable_dependency();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.dependency)
  return _msg;
}
inline void SnippetRequest_QueryInfo::set_allocated_dependency(::StorageEngineInstance::SnippetRequest_Dependency* dependency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dependency_;
  }
  if (dependency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_Dependency>::GetOwningArena(dependency);
    if (message_arena != submessage_arena) {
      dependency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dependency, submessage_arena);
    }
    
  } else {
    
  }
  dependency_ = dependency;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.QueryInfo.dependency)
}

// .StorageEngineInstance.SnippetRequest.Ref ref = 9;
inline bool SnippetRequest_QueryInfo::_internal_has_ref() const {
  return this != internal_default_instance() && ref_ != nullptr;
}
inline bool SnippetRequest_QueryInfo::has_ref() const {
  return _internal_has_ref();
}
inline void SnippetRequest_QueryInfo::clear_ref() {
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_Ref& SnippetRequest_QueryInfo::_internal_ref() const {
  const ::StorageEngineInstance::SnippetRequest_Ref* p = ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_Ref&>(
      ::StorageEngineInstance::_SnippetRequest_Ref_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_Ref& SnippetRequest_QueryInfo::ref() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.QueryInfo.ref)
  return _internal_ref();
}
inline void SnippetRequest_QueryInfo::unsafe_arena_set_allocated_ref(
    ::StorageEngineInstance::SnippetRequest_Ref* ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_);
  }
  ref_ = ref;
  if (ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.QueryInfo.ref)
}
inline ::StorageEngineInstance::SnippetRequest_Ref* SnippetRequest_QueryInfo::release_ref() {
  
  ::StorageEngineInstance::SnippetRequest_Ref* temp = ref_;
  ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Ref* SnippetRequest_QueryInfo::unsafe_arena_release_ref() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.QueryInfo.ref)
  
  ::StorageEngineInstance::SnippetRequest_Ref* temp = ref_;
  ref_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_Ref* SnippetRequest_QueryInfo::_internal_mutable_ref() {
  
  if (ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_Ref>(GetArenaForAllocation());
    ref_ = p;
  }
  return ref_;
}
inline ::StorageEngineInstance::SnippetRequest_Ref* SnippetRequest_QueryInfo::mutable_ref() {
  ::StorageEngineInstance::SnippetRequest_Ref* _msg = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.QueryInfo.ref)
  return _msg;
}
inline void SnippetRequest_QueryInfo::set_allocated_ref(::StorageEngineInstance::SnippetRequest_Ref* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ref_;
  }
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_Ref>::GetOwningArena(ref);
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    
  } else {
    
  }
  ref_ = ref;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.QueryInfo.ref)
}

// -------------------------------------------------------------------

// SnippetRequest_SchemaInfo_Column

// string name = 1;
inline void SnippetRequest_SchemaInfo_Column::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SnippetRequest_SchemaInfo_Column::name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnippetRequest_SchemaInfo_Column::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.name)
}
inline std::string* SnippetRequest_SchemaInfo_Column::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.name)
  return _s;
}
inline const std::string& SnippetRequest_SchemaInfo_Column::_internal_name() const {
  return name_.Get();
}
inline void SnippetRequest_SchemaInfo_Column::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnippetRequest_SchemaInfo_Column::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnippetRequest_SchemaInfo_Column::release_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnippetRequest_SchemaInfo_Column::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.name)
}

// int32 type = 3;
inline void SnippetRequest_SchemaInfo_Column::clear_type() {
  type_ = 0;
}
inline int32_t SnippetRequest_SchemaInfo_Column::_internal_type() const {
  return type_;
}
inline int32_t SnippetRequest_SchemaInfo_Column::type() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.type)
  return _internal_type();
}
inline void SnippetRequest_SchemaInfo_Column::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void SnippetRequest_SchemaInfo_Column::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.type)
}

// int32 length = 2;
inline void SnippetRequest_SchemaInfo_Column::clear_length() {
  length_ = 0;
}
inline int32_t SnippetRequest_SchemaInfo_Column::_internal_length() const {
  return length_;
}
inline int32_t SnippetRequest_SchemaInfo_Column::length() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.length)
  return _internal_length();
}
inline void SnippetRequest_SchemaInfo_Column::_internal_set_length(int32_t value) {
  
  length_ = value;
}
inline void SnippetRequest_SchemaInfo_Column::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.length)
}

// bool primary = 4;
inline void SnippetRequest_SchemaInfo_Column::clear_primary() {
  primary_ = false;
}
inline bool SnippetRequest_SchemaInfo_Column::_internal_primary() const {
  return primary_;
}
inline bool SnippetRequest_SchemaInfo_Column::primary() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.primary)
  return _internal_primary();
}
inline void SnippetRequest_SchemaInfo_Column::_internal_set_primary(bool value) {
  
  primary_ = value;
}
inline void SnippetRequest_SchemaInfo_Column::set_primary(bool value) {
  _internal_set_primary(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.primary)
}

// bool index = 5;
inline void SnippetRequest_SchemaInfo_Column::clear_index() {
  index_ = false;
}
inline bool SnippetRequest_SchemaInfo_Column::_internal_index() const {
  return index_;
}
inline bool SnippetRequest_SchemaInfo_Column::index() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.index)
  return _internal_index();
}
inline void SnippetRequest_SchemaInfo_Column::_internal_set_index(bool value) {
  
  index_ = value;
}
inline void SnippetRequest_SchemaInfo_Column::set_index(bool value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.index)
}

// bool nullable = 6;
inline void SnippetRequest_SchemaInfo_Column::clear_nullable() {
  nullable_ = false;
}
inline bool SnippetRequest_SchemaInfo_Column::_internal_nullable() const {
  return nullable_;
}
inline bool SnippetRequest_SchemaInfo_Column::nullable() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.nullable)
  return _internal_nullable();
}
inline void SnippetRequest_SchemaInfo_Column::_internal_set_nullable(bool value) {
  
  nullable_ = value;
}
inline void SnippetRequest_SchemaInfo_Column::set_nullable(bool value) {
  _internal_set_nullable(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SchemaInfo.Column.nullable)
}

// -------------------------------------------------------------------

// SnippetRequest_SchemaInfo

// repeated .StorageEngineInstance.SnippetRequest.SchemaInfo.Column column_list = 1;
inline int SnippetRequest_SchemaInfo::_internal_column_list_size() const {
  return column_list_.size();
}
inline int SnippetRequest_SchemaInfo::column_list_size() const {
  return _internal_column_list_size();
}
inline void SnippetRequest_SchemaInfo::clear_column_list() {
  column_list_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column* SnippetRequest_SchemaInfo::mutable_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.SchemaInfo.column_list)
  return column_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column >*
SnippetRequest_SchemaInfo::mutable_column_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.SchemaInfo.column_list)
  return &column_list_;
}
inline const ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column& SnippetRequest_SchemaInfo::_internal_column_list(int index) const {
  return column_list_.Get(index);
}
inline const ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column& SnippetRequest_SchemaInfo::column_list(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SchemaInfo.column_list)
  return _internal_column_list(index);
}
inline ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column* SnippetRequest_SchemaInfo::_internal_add_column_list() {
  return column_list_.Add();
}
inline ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column* SnippetRequest_SchemaInfo::add_column_list() {
  ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column* _add = _internal_add_column_list();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.SchemaInfo.column_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column >&
SnippetRequest_SchemaInfo::column_list() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.SchemaInfo.column_list)
  return column_list_;
}

// int32 table_index_number = 2;
inline void SnippetRequest_SchemaInfo::clear_table_index_number() {
  table_index_number_ = 0;
}
inline int32_t SnippetRequest_SchemaInfo::_internal_table_index_number() const {
  return table_index_number_;
}
inline int32_t SnippetRequest_SchemaInfo::table_index_number() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SchemaInfo.table_index_number)
  return _internal_table_index_number();
}
inline void SnippetRequest_SchemaInfo::_internal_set_table_index_number(int32_t value) {
  
  table_index_number_ = value;
}
inline void SnippetRequest_SchemaInfo::set_table_index_number(int32_t value) {
  _internal_set_table_index_number(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SchemaInfo.table_index_number)
}

// -------------------------------------------------------------------

// SnippetRequest_SstInfo_CSD_Block

// repeated int64 offset = 1;
inline int SnippetRequest_SstInfo_CSD_Block::_internal_offset_size() const {
  return offset_.size();
}
inline int SnippetRequest_SstInfo_CSD_Block::offset_size() const {
  return _internal_offset_size();
}
inline void SnippetRequest_SstInfo_CSD_Block::clear_offset() {
  offset_.Clear();
}
inline int64_t SnippetRequest_SstInfo_CSD_Block::_internal_offset(int index) const {
  return offset_.Get(index);
}
inline int64_t SnippetRequest_SstInfo_CSD_Block::offset(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.offset)
  return _internal_offset(index);
}
inline void SnippetRequest_SstInfo_CSD_Block::set_offset(int index, int64_t value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.offset)
}
inline void SnippetRequest_SstInfo_CSD_Block::_internal_add_offset(int64_t value) {
  offset_.Add(value);
}
inline void SnippetRequest_SstInfo_CSD_Block::add_offset(int64_t value) {
  _internal_add_offset(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SnippetRequest_SstInfo_CSD_Block::_internal_offset() const {
  return offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SnippetRequest_SstInfo_CSD_Block::offset() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.offset)
  return _internal_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SnippetRequest_SstInfo_CSD_Block::_internal_mutable_offset() {
  return &offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SnippetRequest_SstInfo_CSD_Block::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.offset)
  return _internal_mutable_offset();
}

// repeated int32 length = 2;
inline int SnippetRequest_SstInfo_CSD_Block::_internal_length_size() const {
  return length_.size();
}
inline int SnippetRequest_SstInfo_CSD_Block::length_size() const {
  return _internal_length_size();
}
inline void SnippetRequest_SstInfo_CSD_Block::clear_length() {
  length_.Clear();
}
inline int32_t SnippetRequest_SstInfo_CSD_Block::_internal_length(int index) const {
  return length_.Get(index);
}
inline int32_t SnippetRequest_SstInfo_CSD_Block::length(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.length)
  return _internal_length(index);
}
inline void SnippetRequest_SstInfo_CSD_Block::set_length(int index, int32_t value) {
  length_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.length)
}
inline void SnippetRequest_SstInfo_CSD_Block::_internal_add_length(int32_t value) {
  length_.Add(value);
}
inline void SnippetRequest_SstInfo_CSD_Block::add_length(int32_t value) {
  _internal_add_length(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.length)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SnippetRequest_SstInfo_CSD_Block::_internal_length() const {
  return length_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SnippetRequest_SstInfo_CSD_Block::length() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.length)
  return _internal_length();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SnippetRequest_SstInfo_CSD_Block::_internal_mutable_length() {
  return &length_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SnippetRequest_SstInfo_CSD_Block::mutable_length() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block.length)
  return _internal_mutable_length();
}

// -------------------------------------------------------------------

// SnippetRequest_SstInfo_CSD

// string csd_id = 1;
inline void SnippetRequest_SstInfo_CSD::clear_csd_id() {
  csd_id_.ClearToEmpty();
}
inline const std::string& SnippetRequest_SstInfo_CSD::csd_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SstInfo.CSD.csd_id)
  return _internal_csd_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnippetRequest_SstInfo_CSD::set_csd_id(ArgT0&& arg0, ArgT... args) {
 
 csd_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SstInfo.CSD.csd_id)
}
inline std::string* SnippetRequest_SstInfo_CSD::mutable_csd_id() {
  std::string* _s = _internal_mutable_csd_id();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.SstInfo.CSD.csd_id)
  return _s;
}
inline const std::string& SnippetRequest_SstInfo_CSD::_internal_csd_id() const {
  return csd_id_.Get();
}
inline void SnippetRequest_SstInfo_CSD::_internal_set_csd_id(const std::string& value) {
  
  csd_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnippetRequest_SstInfo_CSD::_internal_mutable_csd_id() {
  
  return csd_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnippetRequest_SstInfo_CSD::release_csd_id() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.SstInfo.CSD.csd_id)
  return csd_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnippetRequest_SstInfo_CSD::set_allocated_csd_id(std::string* csd_id) {
  if (csd_id != nullptr) {
    
  } else {
    
  }
  csd_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), csd_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (csd_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    csd_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.SstInfo.CSD.csd_id)
}

// string partition = 2;
inline void SnippetRequest_SstInfo_CSD::clear_partition() {
  partition_.ClearToEmpty();
}
inline const std::string& SnippetRequest_SstInfo_CSD::partition() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SstInfo.CSD.partition)
  return _internal_partition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnippetRequest_SstInfo_CSD::set_partition(ArgT0&& arg0, ArgT... args) {
 
 partition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SstInfo.CSD.partition)
}
inline std::string* SnippetRequest_SstInfo_CSD::mutable_partition() {
  std::string* _s = _internal_mutable_partition();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.SstInfo.CSD.partition)
  return _s;
}
inline const std::string& SnippetRequest_SstInfo_CSD::_internal_partition() const {
  return partition_.Get();
}
inline void SnippetRequest_SstInfo_CSD::_internal_set_partition(const std::string& value) {
  
  partition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnippetRequest_SstInfo_CSD::_internal_mutable_partition() {
  
  return partition_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnippetRequest_SstInfo_CSD::release_partition() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.SstInfo.CSD.partition)
  return partition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnippetRequest_SstInfo_CSD::set_allocated_partition(std::string* partition) {
  if (partition != nullptr) {
    
  } else {
    
  }
  partition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (partition_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    partition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.SstInfo.CSD.partition)
}

// repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block block = 3;
inline int SnippetRequest_SstInfo_CSD::_internal_block_size() const {
  return block_.size();
}
inline int SnippetRequest_SstInfo_CSD::block_size() const {
  return _internal_block_size();
}
inline void SnippetRequest_SstInfo_CSD::clear_block() {
  block_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block* SnippetRequest_SstInfo_CSD::mutable_block(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.SstInfo.CSD.block)
  return block_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block >*
SnippetRequest_SstInfo_CSD::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.SstInfo.CSD.block)
  return &block_;
}
inline const ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block& SnippetRequest_SstInfo_CSD::_internal_block(int index) const {
  return block_.Get(index);
}
inline const ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block& SnippetRequest_SstInfo_CSD::block(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SstInfo.CSD.block)
  return _internal_block(index);
}
inline ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block* SnippetRequest_SstInfo_CSD::_internal_add_block() {
  return block_.Add();
}
inline ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block* SnippetRequest_SstInfo_CSD::add_block() {
  ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block* _add = _internal_add_block();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.SstInfo.CSD.block)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block >&
SnippetRequest_SstInfo_CSD::block() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.SstInfo.CSD.block)
  return block_;
}

// -------------------------------------------------------------------

// SnippetRequest_SstInfo

// string sst_name = 1;
inline void SnippetRequest_SstInfo::clear_sst_name() {
  sst_name_.ClearToEmpty();
}
inline const std::string& SnippetRequest_SstInfo::sst_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SstInfo.sst_name)
  return _internal_sst_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnippetRequest_SstInfo::set_sst_name(ArgT0&& arg0, ArgT... args) {
 
 sst_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SstInfo.sst_name)
}
inline std::string* SnippetRequest_SstInfo::mutable_sst_name() {
  std::string* _s = _internal_mutable_sst_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.SstInfo.sst_name)
  return _s;
}
inline const std::string& SnippetRequest_SstInfo::_internal_sst_name() const {
  return sst_name_.Get();
}
inline void SnippetRequest_SstInfo::_internal_set_sst_name(const std::string& value) {
  
  sst_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnippetRequest_SstInfo::_internal_mutable_sst_name() {
  
  return sst_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnippetRequest_SstInfo::release_sst_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.SstInfo.sst_name)
  return sst_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnippetRequest_SstInfo::set_allocated_sst_name(std::string* sst_name) {
  if (sst_name != nullptr) {
    
  } else {
    
  }
  sst_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sst_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sst_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sst_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.SstInfo.sst_name)
}

// repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD csd = 2;
inline int SnippetRequest_SstInfo::_internal_csd_size() const {
  return csd_.size();
}
inline int SnippetRequest_SstInfo::csd_size() const {
  return _internal_csd_size();
}
inline void SnippetRequest_SstInfo::clear_csd() {
  csd_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_SstInfo_CSD* SnippetRequest_SstInfo::mutable_csd(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.SstInfo.csd)
  return csd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD >*
SnippetRequest_SstInfo::mutable_csd() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.SstInfo.csd)
  return &csd_;
}
inline const ::StorageEngineInstance::SnippetRequest_SstInfo_CSD& SnippetRequest_SstInfo::_internal_csd(int index) const {
  return csd_.Get(index);
}
inline const ::StorageEngineInstance::SnippetRequest_SstInfo_CSD& SnippetRequest_SstInfo::csd(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SstInfo.csd)
  return _internal_csd(index);
}
inline ::StorageEngineInstance::SnippetRequest_SstInfo_CSD* SnippetRequest_SstInfo::_internal_add_csd() {
  return csd_.Add();
}
inline ::StorageEngineInstance::SnippetRequest_SstInfo_CSD* SnippetRequest_SstInfo::add_csd() {
  ::StorageEngineInstance::SnippetRequest_SstInfo_CSD* _add = _internal_add_csd();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.SstInfo.csd)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD >&
SnippetRequest_SstInfo::csd() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.SstInfo.csd)
  return csd_;
}

// int32 sst_block_count = 3;
inline void SnippetRequest_SstInfo::clear_sst_block_count() {
  sst_block_count_ = 0;
}
inline int32_t SnippetRequest_SstInfo::_internal_sst_block_count() const {
  return sst_block_count_;
}
inline int32_t SnippetRequest_SstInfo::sst_block_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.SstInfo.sst_block_count)
  return _internal_sst_block_count();
}
inline void SnippetRequest_SstInfo::_internal_set_sst_block_count(int32_t value) {
  
  sst_block_count_ = value;
}
inline void SnippetRequest_SstInfo::set_sst_block_count(int32_t value) {
  _internal_set_sst_block_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.SstInfo.sst_block_count)
}

// -------------------------------------------------------------------

// SnippetRequest_WalInfo

// repeated string deleted_key = 1;
inline int SnippetRequest_WalInfo::_internal_deleted_key_size() const {
  return deleted_key_.size();
}
inline int SnippetRequest_WalInfo::deleted_key_size() const {
  return _internal_deleted_key_size();
}
inline void SnippetRequest_WalInfo::clear_deleted_key() {
  deleted_key_.Clear();
}
inline std::string* SnippetRequest_WalInfo::add_deleted_key() {
  std::string* _s = _internal_add_deleted_key();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
  return _s;
}
inline const std::string& SnippetRequest_WalInfo::_internal_deleted_key(int index) const {
  return deleted_key_.Get(index);
}
inline const std::string& SnippetRequest_WalInfo::deleted_key(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
  return _internal_deleted_key(index);
}
inline std::string* SnippetRequest_WalInfo::mutable_deleted_key(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
  return deleted_key_.Mutable(index);
}
inline void SnippetRequest_WalInfo::set_deleted_key(int index, const std::string& value) {
  deleted_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
}
inline void SnippetRequest_WalInfo::set_deleted_key(int index, std::string&& value) {
  deleted_key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
}
inline void SnippetRequest_WalInfo::set_deleted_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deleted_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
}
inline void SnippetRequest_WalInfo::set_deleted_key(int index, const char* value, size_t size) {
  deleted_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
}
inline std::string* SnippetRequest_WalInfo::_internal_add_deleted_key() {
  return deleted_key_.Add();
}
inline void SnippetRequest_WalInfo::add_deleted_key(const std::string& value) {
  deleted_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
}
inline void SnippetRequest_WalInfo::add_deleted_key(std::string&& value) {
  deleted_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
}
inline void SnippetRequest_WalInfo::add_deleted_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deleted_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
}
inline void SnippetRequest_WalInfo::add_deleted_key(const char* value, size_t size) {
  deleted_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetRequest_WalInfo::deleted_key() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
  return deleted_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetRequest_WalInfo::mutable_deleted_key() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.WalInfo.deleted_key)
  return &deleted_key_;
}

// repeated string inserted_key = 2;
inline int SnippetRequest_WalInfo::_internal_inserted_key_size() const {
  return inserted_key_.size();
}
inline int SnippetRequest_WalInfo::inserted_key_size() const {
  return _internal_inserted_key_size();
}
inline void SnippetRequest_WalInfo::clear_inserted_key() {
  inserted_key_.Clear();
}
inline std::string* SnippetRequest_WalInfo::add_inserted_key() {
  std::string* _s = _internal_add_inserted_key();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
  return _s;
}
inline const std::string& SnippetRequest_WalInfo::_internal_inserted_key(int index) const {
  return inserted_key_.Get(index);
}
inline const std::string& SnippetRequest_WalInfo::inserted_key(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
  return _internal_inserted_key(index);
}
inline std::string* SnippetRequest_WalInfo::mutable_inserted_key(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
  return inserted_key_.Mutable(index);
}
inline void SnippetRequest_WalInfo::set_inserted_key(int index, const std::string& value) {
  inserted_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
}
inline void SnippetRequest_WalInfo::set_inserted_key(int index, std::string&& value) {
  inserted_key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
}
inline void SnippetRequest_WalInfo::set_inserted_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inserted_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
}
inline void SnippetRequest_WalInfo::set_inserted_key(int index, const char* value, size_t size) {
  inserted_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
}
inline std::string* SnippetRequest_WalInfo::_internal_add_inserted_key() {
  return inserted_key_.Add();
}
inline void SnippetRequest_WalInfo::add_inserted_key(const std::string& value) {
  inserted_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
}
inline void SnippetRequest_WalInfo::add_inserted_key(std::string&& value) {
  inserted_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
}
inline void SnippetRequest_WalInfo::add_inserted_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inserted_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
}
inline void SnippetRequest_WalInfo::add_inserted_key(const char* value, size_t size) {
  inserted_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetRequest_WalInfo::inserted_key() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
  return inserted_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetRequest_WalInfo::mutable_inserted_key() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.WalInfo.inserted_key)
  return &inserted_key_;
}

// repeated string inserted_value = 3;
inline int SnippetRequest_WalInfo::_internal_inserted_value_size() const {
  return inserted_value_.size();
}
inline int SnippetRequest_WalInfo::inserted_value_size() const {
  return _internal_inserted_value_size();
}
inline void SnippetRequest_WalInfo::clear_inserted_value() {
  inserted_value_.Clear();
}
inline std::string* SnippetRequest_WalInfo::add_inserted_value() {
  std::string* _s = _internal_add_inserted_value();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
  return _s;
}
inline const std::string& SnippetRequest_WalInfo::_internal_inserted_value(int index) const {
  return inserted_value_.Get(index);
}
inline const std::string& SnippetRequest_WalInfo::inserted_value(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
  return _internal_inserted_value(index);
}
inline std::string* SnippetRequest_WalInfo::mutable_inserted_value(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
  return inserted_value_.Mutable(index);
}
inline void SnippetRequest_WalInfo::set_inserted_value(int index, const std::string& value) {
  inserted_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
}
inline void SnippetRequest_WalInfo::set_inserted_value(int index, std::string&& value) {
  inserted_value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
}
inline void SnippetRequest_WalInfo::set_inserted_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inserted_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
}
inline void SnippetRequest_WalInfo::set_inserted_value(int index, const char* value, size_t size) {
  inserted_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
}
inline std::string* SnippetRequest_WalInfo::_internal_add_inserted_value() {
  return inserted_value_.Add();
}
inline void SnippetRequest_WalInfo::add_inserted_value(const std::string& value) {
  inserted_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
}
inline void SnippetRequest_WalInfo::add_inserted_value(std::string&& value) {
  inserted_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
}
inline void SnippetRequest_WalInfo::add_inserted_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inserted_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
}
inline void SnippetRequest_WalInfo::add_inserted_value(const char* value, size_t size) {
  inserted_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetRequest_WalInfo::inserted_value() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
  return inserted_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetRequest_WalInfo::mutable_inserted_value() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.WalInfo.inserted_value)
  return &inserted_value_;
}

// -------------------------------------------------------------------

// SnippetRequest_ResultInfo

// string table_alias = 1;
inline void SnippetRequest_ResultInfo::clear_table_alias() {
  table_alias_.ClearToEmpty();
}
inline const std::string& SnippetRequest_ResultInfo::table_alias() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.ResultInfo.table_alias)
  return _internal_table_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnippetRequest_ResultInfo::set_table_alias(ArgT0&& arg0, ArgT... args) {
 
 table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.ResultInfo.table_alias)
}
inline std::string* SnippetRequest_ResultInfo::mutable_table_alias() {
  std::string* _s = _internal_mutable_table_alias();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.ResultInfo.table_alias)
  return _s;
}
inline const std::string& SnippetRequest_ResultInfo::_internal_table_alias() const {
  return table_alias_.Get();
}
inline void SnippetRequest_ResultInfo::_internal_set_table_alias(const std::string& value) {
  
  table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SnippetRequest_ResultInfo::_internal_mutable_table_alias() {
  
  return table_alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SnippetRequest_ResultInfo::release_table_alias() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.ResultInfo.table_alias)
  return table_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SnippetRequest_ResultInfo::set_allocated_table_alias(std::string* table_alias) {
  if (table_alias != nullptr) {
    
  } else {
    
  }
  table_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_alias,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_alias_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.ResultInfo.table_alias)
}

// repeated string column_alias = 2;
inline int SnippetRequest_ResultInfo::_internal_column_alias_size() const {
  return column_alias_.size();
}
inline int SnippetRequest_ResultInfo::column_alias_size() const {
  return _internal_column_alias_size();
}
inline void SnippetRequest_ResultInfo::clear_column_alias() {
  column_alias_.Clear();
}
inline std::string* SnippetRequest_ResultInfo::add_column_alias() {
  std::string* _s = _internal_add_column_alias();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
  return _s;
}
inline const std::string& SnippetRequest_ResultInfo::_internal_column_alias(int index) const {
  return column_alias_.Get(index);
}
inline const std::string& SnippetRequest_ResultInfo::column_alias(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
  return _internal_column_alias(index);
}
inline std::string* SnippetRequest_ResultInfo::mutable_column_alias(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
  return column_alias_.Mutable(index);
}
inline void SnippetRequest_ResultInfo::set_column_alias(int index, const std::string& value) {
  column_alias_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
}
inline void SnippetRequest_ResultInfo::set_column_alias(int index, std::string&& value) {
  column_alias_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
}
inline void SnippetRequest_ResultInfo::set_column_alias(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_alias_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
}
inline void SnippetRequest_ResultInfo::set_column_alias(int index, const char* value, size_t size) {
  column_alias_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
}
inline std::string* SnippetRequest_ResultInfo::_internal_add_column_alias() {
  return column_alias_.Add();
}
inline void SnippetRequest_ResultInfo::add_column_alias(const std::string& value) {
  column_alias_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
}
inline void SnippetRequest_ResultInfo::add_column_alias(std::string&& value) {
  column_alias_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
}
inline void SnippetRequest_ResultInfo::add_column_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_alias_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
}
inline void SnippetRequest_ResultInfo::add_column_alias(const char* value, size_t size) {
  column_alias_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetRequest_ResultInfo::column_alias() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
  return column_alias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetRequest_ResultInfo::mutable_column_alias() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.ResultInfo.column_alias)
  return &column_alias_;
}

// int32 total_block_count = 3;
inline void SnippetRequest_ResultInfo::clear_total_block_count() {
  total_block_count_ = 0;
}
inline int32_t SnippetRequest_ResultInfo::_internal_total_block_count() const {
  return total_block_count_;
}
inline int32_t SnippetRequest_ResultInfo::total_block_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.ResultInfo.total_block_count)
  return _internal_total_block_count();
}
inline void SnippetRequest_ResultInfo::_internal_set_total_block_count(int32_t value) {
  
  total_block_count_ = value;
}
inline void SnippetRequest_ResultInfo::set_total_block_count(int32_t value) {
  _internal_set_total_block_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.ResultInfo.total_block_count)
}

// -------------------------------------------------------------------

// SnippetRequest

// .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
inline void SnippetRequest::clear_type() {
  type_ = 0;
}
inline ::StorageEngineInstance::SnippetRequest_SnippetType SnippetRequest::_internal_type() const {
  return static_cast< ::StorageEngineInstance::SnippetRequest_SnippetType >(type_);
}
inline ::StorageEngineInstance::SnippetRequest_SnippetType SnippetRequest::type() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.type)
  return _internal_type();
}
inline void SnippetRequest::_internal_set_type(::StorageEngineInstance::SnippetRequest_SnippetType value) {
  
  type_ = value;
}
inline void SnippetRequest::set_type(::StorageEngineInstance::SnippetRequest_SnippetType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.type)
}

// int32 query_id = 2;
inline void SnippetRequest::clear_query_id() {
  query_id_ = 0;
}
inline int32_t SnippetRequest::_internal_query_id() const {
  return query_id_;
}
inline int32_t SnippetRequest::query_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.query_id)
  return _internal_query_id();
}
inline void SnippetRequest::_internal_set_query_id(int32_t value) {
  
  query_id_ = value;
}
inline void SnippetRequest::set_query_id(int32_t value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.query_id)
}

// int32 work_id = 3;
inline void SnippetRequest::clear_work_id() {
  work_id_ = 0;
}
inline int32_t SnippetRequest::_internal_work_id() const {
  return work_id_;
}
inline int32_t SnippetRequest::work_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.work_id)
  return _internal_work_id();
}
inline void SnippetRequest::_internal_set_work_id(int32_t value) {
  
  work_id_ = value;
}
inline void SnippetRequest::set_work_id(int32_t value) {
  _internal_set_work_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.work_id)
}

// .StorageEngineInstance.SnippetRequest.QueryInfo query_info = 4;
inline bool SnippetRequest::_internal_has_query_info() const {
  return this != internal_default_instance() && query_info_ != nullptr;
}
inline bool SnippetRequest::has_query_info() const {
  return _internal_has_query_info();
}
inline void SnippetRequest::clear_query_info() {
  if (GetArenaForAllocation() == nullptr && query_info_ != nullptr) {
    delete query_info_;
  }
  query_info_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_QueryInfo& SnippetRequest::_internal_query_info() const {
  const ::StorageEngineInstance::SnippetRequest_QueryInfo* p = query_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_QueryInfo&>(
      ::StorageEngineInstance::_SnippetRequest_QueryInfo_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_QueryInfo& SnippetRequest::query_info() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.query_info)
  return _internal_query_info();
}
inline void SnippetRequest::unsafe_arena_set_allocated_query_info(
    ::StorageEngineInstance::SnippetRequest_QueryInfo* query_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_info_);
  }
  query_info_ = query_info;
  if (query_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.query_info)
}
inline ::StorageEngineInstance::SnippetRequest_QueryInfo* SnippetRequest::release_query_info() {
  
  ::StorageEngineInstance::SnippetRequest_QueryInfo* temp = query_info_;
  query_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_QueryInfo* SnippetRequest::unsafe_arena_release_query_info() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.query_info)
  
  ::StorageEngineInstance::SnippetRequest_QueryInfo* temp = query_info_;
  query_info_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_QueryInfo* SnippetRequest::_internal_mutable_query_info() {
  
  if (query_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_QueryInfo>(GetArenaForAllocation());
    query_info_ = p;
  }
  return query_info_;
}
inline ::StorageEngineInstance::SnippetRequest_QueryInfo* SnippetRequest::mutable_query_info() {
  ::StorageEngineInstance::SnippetRequest_QueryInfo* _msg = _internal_mutable_query_info();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.query_info)
  return _msg;
}
inline void SnippetRequest::set_allocated_query_info(::StorageEngineInstance::SnippetRequest_QueryInfo* query_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete query_info_;
  }
  if (query_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_QueryInfo>::GetOwningArena(query_info);
    if (message_arena != submessage_arena) {
      query_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_info, submessage_arena);
    }
    
  } else {
    
  }
  query_info_ = query_info;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.query_info)
}

// .StorageEngineInstance.SnippetRequest.SchemaInfo schema_info = 5;
inline bool SnippetRequest::_internal_has_schema_info() const {
  return this != internal_default_instance() && schema_info_ != nullptr;
}
inline bool SnippetRequest::has_schema_info() const {
  return _internal_has_schema_info();
}
inline void SnippetRequest::clear_schema_info() {
  if (GetArenaForAllocation() == nullptr && schema_info_ != nullptr) {
    delete schema_info_;
  }
  schema_info_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_SchemaInfo& SnippetRequest::_internal_schema_info() const {
  const ::StorageEngineInstance::SnippetRequest_SchemaInfo* p = schema_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_SchemaInfo&>(
      ::StorageEngineInstance::_SnippetRequest_SchemaInfo_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_SchemaInfo& SnippetRequest::schema_info() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.schema_info)
  return _internal_schema_info();
}
inline void SnippetRequest::unsafe_arena_set_allocated_schema_info(
    ::StorageEngineInstance::SnippetRequest_SchemaInfo* schema_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_info_);
  }
  schema_info_ = schema_info;
  if (schema_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.schema_info)
}
inline ::StorageEngineInstance::SnippetRequest_SchemaInfo* SnippetRequest::release_schema_info() {
  
  ::StorageEngineInstance::SnippetRequest_SchemaInfo* temp = schema_info_;
  schema_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_SchemaInfo* SnippetRequest::unsafe_arena_release_schema_info() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.schema_info)
  
  ::StorageEngineInstance::SnippetRequest_SchemaInfo* temp = schema_info_;
  schema_info_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_SchemaInfo* SnippetRequest::_internal_mutable_schema_info() {
  
  if (schema_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_SchemaInfo>(GetArenaForAllocation());
    schema_info_ = p;
  }
  return schema_info_;
}
inline ::StorageEngineInstance::SnippetRequest_SchemaInfo* SnippetRequest::mutable_schema_info() {
  ::StorageEngineInstance::SnippetRequest_SchemaInfo* _msg = _internal_mutable_schema_info();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.schema_info)
  return _msg;
}
inline void SnippetRequest::set_allocated_schema_info(::StorageEngineInstance::SnippetRequest_SchemaInfo* schema_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete schema_info_;
  }
  if (schema_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_SchemaInfo>::GetOwningArena(schema_info);
    if (message_arena != submessage_arena) {
      schema_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_info, submessage_arena);
    }
    
  } else {
    
  }
  schema_info_ = schema_info;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.schema_info)
}

// repeated .StorageEngineInstance.SnippetRequest.SstInfo sst_info = 6;
inline int SnippetRequest::_internal_sst_info_size() const {
  return sst_info_.size();
}
inline int SnippetRequest::sst_info_size() const {
  return _internal_sst_info_size();
}
inline void SnippetRequest::clear_sst_info() {
  sst_info_.Clear();
}
inline ::StorageEngineInstance::SnippetRequest_SstInfo* SnippetRequest::mutable_sst_info(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.sst_info)
  return sst_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo >*
SnippetRequest::mutable_sst_info() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SnippetRequest.sst_info)
  return &sst_info_;
}
inline const ::StorageEngineInstance::SnippetRequest_SstInfo& SnippetRequest::_internal_sst_info(int index) const {
  return sst_info_.Get(index);
}
inline const ::StorageEngineInstance::SnippetRequest_SstInfo& SnippetRequest::sst_info(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.sst_info)
  return _internal_sst_info(index);
}
inline ::StorageEngineInstance::SnippetRequest_SstInfo* SnippetRequest::_internal_add_sst_info() {
  return sst_info_.Add();
}
inline ::StorageEngineInstance::SnippetRequest_SstInfo* SnippetRequest::add_sst_info() {
  ::StorageEngineInstance::SnippetRequest_SstInfo* _add = _internal_add_sst_info();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SnippetRequest.sst_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::SnippetRequest_SstInfo >&
SnippetRequest::sst_info() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SnippetRequest.sst_info)
  return sst_info_;
}

// .StorageEngineInstance.SnippetRequest.WalInfo wal_info = 7;
inline bool SnippetRequest::_internal_has_wal_info() const {
  return this != internal_default_instance() && wal_info_ != nullptr;
}
inline bool SnippetRequest::has_wal_info() const {
  return _internal_has_wal_info();
}
inline void SnippetRequest::clear_wal_info() {
  if (GetArenaForAllocation() == nullptr && wal_info_ != nullptr) {
    delete wal_info_;
  }
  wal_info_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_WalInfo& SnippetRequest::_internal_wal_info() const {
  const ::StorageEngineInstance::SnippetRequest_WalInfo* p = wal_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_WalInfo&>(
      ::StorageEngineInstance::_SnippetRequest_WalInfo_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_WalInfo& SnippetRequest::wal_info() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.wal_info)
  return _internal_wal_info();
}
inline void SnippetRequest::unsafe_arena_set_allocated_wal_info(
    ::StorageEngineInstance::SnippetRequest_WalInfo* wal_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wal_info_);
  }
  wal_info_ = wal_info;
  if (wal_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.wal_info)
}
inline ::StorageEngineInstance::SnippetRequest_WalInfo* SnippetRequest::release_wal_info() {
  
  ::StorageEngineInstance::SnippetRequest_WalInfo* temp = wal_info_;
  wal_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_WalInfo* SnippetRequest::unsafe_arena_release_wal_info() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.wal_info)
  
  ::StorageEngineInstance::SnippetRequest_WalInfo* temp = wal_info_;
  wal_info_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_WalInfo* SnippetRequest::_internal_mutable_wal_info() {
  
  if (wal_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_WalInfo>(GetArenaForAllocation());
    wal_info_ = p;
  }
  return wal_info_;
}
inline ::StorageEngineInstance::SnippetRequest_WalInfo* SnippetRequest::mutable_wal_info() {
  ::StorageEngineInstance::SnippetRequest_WalInfo* _msg = _internal_mutable_wal_info();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.wal_info)
  return _msg;
}
inline void SnippetRequest::set_allocated_wal_info(::StorageEngineInstance::SnippetRequest_WalInfo* wal_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete wal_info_;
  }
  if (wal_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_WalInfo>::GetOwningArena(wal_info);
    if (message_arena != submessage_arena) {
      wal_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wal_info, submessage_arena);
    }
    
  } else {
    
  }
  wal_info_ = wal_info;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.wal_info)
}

// .StorageEngineInstance.SnippetRequest.ResultInfo result_info = 8;
inline bool SnippetRequest::_internal_has_result_info() const {
  return this != internal_default_instance() && result_info_ != nullptr;
}
inline bool SnippetRequest::has_result_info() const {
  return _internal_has_result_info();
}
inline void SnippetRequest::clear_result_info() {
  if (GetArenaForAllocation() == nullptr && result_info_ != nullptr) {
    delete result_info_;
  }
  result_info_ = nullptr;
}
inline const ::StorageEngineInstance::SnippetRequest_ResultInfo& SnippetRequest::_internal_result_info() const {
  const ::StorageEngineInstance::SnippetRequest_ResultInfo* p = result_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::SnippetRequest_ResultInfo&>(
      ::StorageEngineInstance::_SnippetRequest_ResultInfo_default_instance_);
}
inline const ::StorageEngineInstance::SnippetRequest_ResultInfo& SnippetRequest::result_info() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.result_info)
  return _internal_result_info();
}
inline void SnippetRequest::unsafe_arena_set_allocated_result_info(
    ::StorageEngineInstance::SnippetRequest_ResultInfo* result_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_info_);
  }
  result_info_ = result_info;
  if (result_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.result_info)
}
inline ::StorageEngineInstance::SnippetRequest_ResultInfo* SnippetRequest::release_result_info() {
  
  ::StorageEngineInstance::SnippetRequest_ResultInfo* temp = result_info_;
  result_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_ResultInfo* SnippetRequest::unsafe_arena_release_result_info() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.result_info)
  
  ::StorageEngineInstance::SnippetRequest_ResultInfo* temp = result_info_;
  result_info_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::SnippetRequest_ResultInfo* SnippetRequest::_internal_mutable_result_info() {
  
  if (result_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::SnippetRequest_ResultInfo>(GetArenaForAllocation());
    result_info_ = p;
  }
  return result_info_;
}
inline ::StorageEngineInstance::SnippetRequest_ResultInfo* SnippetRequest::mutable_result_info() {
  ::StorageEngineInstance::SnippetRequest_ResultInfo* _msg = _internal_mutable_result_info();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.result_info)
  return _msg;
}
inline void SnippetRequest::set_allocated_result_info(::StorageEngineInstance::SnippetRequest_ResultInfo* result_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_info_;
  }
  if (result_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::SnippetRequest_ResultInfo>::GetOwningArena(result_info);
    if (message_arena != submessage_arena) {
      result_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_info, submessage_arena);
    }
    
  } else {
    
  }
  result_info_ = result_info;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.result_info)
}

// -------------------------------------------------------------------

// QueryStringResult

// string query_result = 1;
inline void QueryStringResult::clear_query_result() {
  query_result_.ClearToEmpty();
}
inline const std::string& QueryStringResult::query_result() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryStringResult.query_result)
  return _internal_query_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryStringResult::set_query_result(ArgT0&& arg0, ArgT... args) {
 
 query_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryStringResult.query_result)
}
inline std::string* QueryStringResult::mutable_query_result() {
  std::string* _s = _internal_mutable_query_result();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.QueryStringResult.query_result)
  return _s;
}
inline const std::string& QueryStringResult::_internal_query_result() const {
  return query_result_.Get();
}
inline void QueryStringResult::_internal_set_query_result(const std::string& value) {
  
  query_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryStringResult::_internal_mutable_query_result() {
  
  return query_result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryStringResult::release_query_result() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.QueryStringResult.query_result)
  return query_result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryStringResult::set_allocated_query_result(std::string* query_result) {
  if (query_result != nullptr) {
    
  } else {
    
  }
  query_result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (query_result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    query_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.QueryStringResult.query_result)
}

// int32 scanned_row_count = 2;
inline void QueryStringResult::clear_scanned_row_count() {
  scanned_row_count_ = 0;
}
inline int32_t QueryStringResult::_internal_scanned_row_count() const {
  return scanned_row_count_;
}
inline int32_t QueryStringResult::scanned_row_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryStringResult.scanned_row_count)
  return _internal_scanned_row_count();
}
inline void QueryStringResult::_internal_set_scanned_row_count(int32_t value) {
  
  scanned_row_count_ = value;
}
inline void QueryStringResult::set_scanned_row_count(int32_t value) {
  _internal_set_scanned_row_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryStringResult.scanned_row_count)
}

// int32 filtered_row_count = 3;
inline void QueryStringResult::clear_filtered_row_count() {
  filtered_row_count_ = 0;
}
inline int32_t QueryStringResult::_internal_filtered_row_count() const {
  return filtered_row_count_;
}
inline int32_t QueryStringResult::filtered_row_count() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.QueryStringResult.filtered_row_count)
  return _internal_filtered_row_count();
}
inline void QueryStringResult::_internal_set_filtered_row_count(int32_t value) {
  
  filtered_row_count_ = value;
}
inline void QueryStringResult::set_filtered_row_count(int32_t value) {
  _internal_set_filtered_row_count(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.QueryStringResult.filtered_row_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StorageEngineInstance

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::StorageEngineInstance::SnippetRequest_Filter_OperType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::SnippetRequest_Filter_OperType>() {
  return ::StorageEngineInstance::SnippetRequest_Filter_OperType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::SnippetRequest_Projection_SelectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::SnippetRequest_Projection_SelectType>() {
  return ::StorageEngineInstance::SnippetRequest_Projection_SelectType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::SnippetRequest_Order_OrderDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::SnippetRequest_Order_OrderDirection>() {
  return ::StorageEngineInstance::SnippetRequest_Order_OrderDirection_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::SnippetRequest_SnippetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::SnippetRequest_SnippetType>() {
  return ::StorageEngineInstance::SnippetRequest_SnippetType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::SnippetRequest_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::SnippetRequest_ValueType>() {
  return ::StorageEngineInstance::SnippetRequest_ValueType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snippet_5fsample_2eproto
