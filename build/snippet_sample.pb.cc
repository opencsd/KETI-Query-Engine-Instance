// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snippet_sample.proto

#include "snippet_sample.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace StorageEngineInstance {
constexpr SnippetRequest_Filter_FilterValue::SnippetRequest_Filter_FilterValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_()
  , _type_cached_byte_size_(0)
  , value_(){}
struct SnippetRequest_Filter_FilterValueDefaultTypeInternal {
  constexpr SnippetRequest_Filter_FilterValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_Filter_FilterValueDefaultTypeInternal() {}
  union {
    SnippetRequest_Filter_FilterValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_Filter_FilterValueDefaultTypeInternal _SnippetRequest_Filter_FilterValue_default_instance_;
constexpr SnippetRequest_Filter::SnippetRequest_Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lv_(nullptr)
  , rv_(nullptr)
  , operator__(0)
{}
struct SnippetRequest_FilterDefaultTypeInternal {
  constexpr SnippetRequest_FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_FilterDefaultTypeInternal() {}
  union {
    SnippetRequest_Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_FilterDefaultTypeInternal _SnippetRequest_Filter_default_instance_;
constexpr SnippetRequest_Projection::SnippetRequest_Projection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , value_type_()
  , _value_type_cached_byte_size_(0)
  , select_type_(0)
{}
struct SnippetRequest_ProjectionDefaultTypeInternal {
  constexpr SnippetRequest_ProjectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_ProjectionDefaultTypeInternal() {}
  union {
    SnippetRequest_Projection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_ProjectionDefaultTypeInternal _SnippetRequest_Projection_default_instance_;
constexpr SnippetRequest_Order::SnippetRequest_Order(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ascending_()
  , _ascending_cached_byte_size_(0)
  , column_name_(){}
struct SnippetRequest_OrderDefaultTypeInternal {
  constexpr SnippetRequest_OrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_OrderDefaultTypeInternal() {}
  union {
    SnippetRequest_Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_OrderDefaultTypeInternal _SnippetRequest_Order_default_instance_;
constexpr SnippetRequest_Dependency::SnippetRequest_Dependency(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dependency_projection_()
  , dependency_filter_(){}
struct SnippetRequest_DependencyDefaultTypeInternal {
  constexpr SnippetRequest_DependencyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_DependencyDefaultTypeInternal() {}
  union {
    SnippetRequest_Dependency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_DependencyDefaultTypeInternal _SnippetRequest_Dependency_default_instance_;
constexpr SnippetRequest_Limit::SnippetRequest_Limit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0)
  , length_(0){}
struct SnippetRequest_LimitDefaultTypeInternal {
  constexpr SnippetRequest_LimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_LimitDefaultTypeInternal() {}
  union {
    SnippetRequest_Limit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_LimitDefaultTypeInternal _SnippetRequest_Limit_default_instance_;
constexpr SnippetRequest_Ref::SnippetRequest_Ref(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , column_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SnippetRequest_RefDefaultTypeInternal {
  constexpr SnippetRequest_RefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_RefDefaultTypeInternal() {}
  union {
    SnippetRequest_Ref _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_RefDefaultTypeInternal _SnippetRequest_Ref_default_instance_;
constexpr SnippetRequest_QueryInfo::SnippetRequest_QueryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_()
  , filtering_()
  , projection_()
  , having_()
  , group_by_()
  , order_by_(nullptr)
  , limit_(nullptr)
  , dependency_(nullptr)
  , ref_(nullptr){}
struct SnippetRequest_QueryInfoDefaultTypeInternal {
  constexpr SnippetRequest_QueryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_QueryInfoDefaultTypeInternal() {}
  union {
    SnippetRequest_QueryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_QueryInfoDefaultTypeInternal _SnippetRequest_QueryInfo_default_instance_;
constexpr SnippetRequest_SchemaInfo_Column::SnippetRequest_SchemaInfo_Column(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , length_(0)
  , type_(0)
  , primary_(false)
  , index_(false)
  , nullable_(false){}
struct SnippetRequest_SchemaInfo_ColumnDefaultTypeInternal {
  constexpr SnippetRequest_SchemaInfo_ColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_SchemaInfo_ColumnDefaultTypeInternal() {}
  union {
    SnippetRequest_SchemaInfo_Column _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_SchemaInfo_ColumnDefaultTypeInternal _SnippetRequest_SchemaInfo_Column_default_instance_;
constexpr SnippetRequest_SchemaInfo::SnippetRequest_SchemaInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_list_()
  , table_index_number_(0){}
struct SnippetRequest_SchemaInfoDefaultTypeInternal {
  constexpr SnippetRequest_SchemaInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_SchemaInfoDefaultTypeInternal() {}
  union {
    SnippetRequest_SchemaInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_SchemaInfoDefaultTypeInternal _SnippetRequest_SchemaInfo_default_instance_;
constexpr SnippetRequest_SstInfo_CSD_Block::SnippetRequest_SstInfo_CSD_Block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_()
  , _offset_cached_byte_size_(0)
  , length_()
  , _length_cached_byte_size_(0){}
struct SnippetRequest_SstInfo_CSD_BlockDefaultTypeInternal {
  constexpr SnippetRequest_SstInfo_CSD_BlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_SstInfo_CSD_BlockDefaultTypeInternal() {}
  union {
    SnippetRequest_SstInfo_CSD_Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_SstInfo_CSD_BlockDefaultTypeInternal _SnippetRequest_SstInfo_CSD_Block_default_instance_;
constexpr SnippetRequest_SstInfo_CSD::SnippetRequest_SstInfo_CSD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_()
  , csd_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partition_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SnippetRequest_SstInfo_CSDDefaultTypeInternal {
  constexpr SnippetRequest_SstInfo_CSDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_SstInfo_CSDDefaultTypeInternal() {}
  union {
    SnippetRequest_SstInfo_CSD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_SstInfo_CSDDefaultTypeInternal _SnippetRequest_SstInfo_CSD_default_instance_;
constexpr SnippetRequest_SstInfo::SnippetRequest_SstInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : csd_()
  , sst_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sst_block_count_(0){}
struct SnippetRequest_SstInfoDefaultTypeInternal {
  constexpr SnippetRequest_SstInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_SstInfoDefaultTypeInternal() {}
  union {
    SnippetRequest_SstInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_SstInfoDefaultTypeInternal _SnippetRequest_SstInfo_default_instance_;
constexpr SnippetRequest_WalInfo::SnippetRequest_WalInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deleted_key_()
  , inserted_key_()
  , inserted_value_(){}
struct SnippetRequest_WalInfoDefaultTypeInternal {
  constexpr SnippetRequest_WalInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_WalInfoDefaultTypeInternal() {}
  union {
    SnippetRequest_WalInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_WalInfoDefaultTypeInternal _SnippetRequest_WalInfo_default_instance_;
constexpr SnippetRequest_ResultInfo::SnippetRequest_ResultInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_alias_()
  , table_alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_block_count_(0){}
struct SnippetRequest_ResultInfoDefaultTypeInternal {
  constexpr SnippetRequest_ResultInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequest_ResultInfoDefaultTypeInternal() {}
  union {
    SnippetRequest_ResultInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequest_ResultInfoDefaultTypeInternal _SnippetRequest_ResultInfo_default_instance_;
constexpr SnippetRequest::SnippetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sst_info_()
  , query_info_(nullptr)
  , schema_info_(nullptr)
  , wal_info_(nullptr)
  , result_info_(nullptr)
  , type_(0)

  , query_id_(0)
  , work_id_(0){}
struct SnippetRequestDefaultTypeInternal {
  constexpr SnippetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequestDefaultTypeInternal() {}
  union {
    SnippetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequestDefaultTypeInternal _SnippetRequest_default_instance_;
constexpr QueryStringResult::QueryStringResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scanned_row_count_(0)
  , filtered_row_count_(0){}
struct QueryStringResultDefaultTypeInternal {
  constexpr QueryStringResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryStringResultDefaultTypeInternal() {}
  union {
    QueryStringResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryStringResultDefaultTypeInternal _QueryStringResult_default_instance_;
}  // namespace StorageEngineInstance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_snippet_5fsample_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_snippet_5fsample_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_snippet_5fsample_2eproto = nullptr;

const uint32_t TableStruct_snippet_5fsample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Filter_FilterValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Filter_FilterValue, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Filter_FilterValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Filter, lv_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Filter, operator__),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Filter, rv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Projection, select_type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Projection, value_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Projection, value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Order, ascending_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Order, column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Dependency, dependency_projection_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Dependency, dependency_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Limit, offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Limit, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Ref, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Ref, table_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_Ref, column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, table_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, filtering_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, projection_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, having_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, group_by_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, order_by_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, limit_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, dependency_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_QueryInfo, ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo_Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo_Column, name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo_Column, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo_Column, length_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo_Column, primary_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo_Column, index_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo_Column, nullable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo, column_list_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SchemaInfo, table_index_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block, offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo_CSD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo_CSD, csd_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo_CSD, partition_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo_CSD, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo, sst_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo, csd_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_SstInfo, sst_block_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_WalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_WalInfo, deleted_key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_WalInfo, inserted_key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_WalInfo, inserted_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_ResultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_ResultInfo, table_alias_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_ResultInfo, column_alias_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest_ResultInfo, total_block_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, query_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, work_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, query_info_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, schema_info_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, sst_info_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, wal_info_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, result_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryStringResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryStringResult, query_result_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryStringResult, scanned_row_count_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryStringResult, filtered_row_count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_Filter_FilterValue)},
  { 8, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_Filter)},
  { 17, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_Projection)},
  { 26, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_Order)},
  { 34, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_Dependency)},
  { 42, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_Limit)},
  { 50, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_Ref)},
  { 58, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_QueryInfo)},
  { 73, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_SchemaInfo_Column)},
  { 85, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_SchemaInfo)},
  { 93, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block)},
  { 101, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_SstInfo_CSD)},
  { 110, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_SstInfo)},
  { 119, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_WalInfo)},
  { 128, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest_ResultInfo)},
  { 137, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest)},
  { 151, -1, -1, sizeof(::StorageEngineInstance::QueryStringResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_Filter_FilterValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_Projection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_Dependency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_Limit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_Ref_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_QueryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_SchemaInfo_Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_SchemaInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_SstInfo_CSD_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_SstInfo_CSD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_SstInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_WalInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_ResultInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_QueryStringResult_default_instance_),
};

const char descriptor_table_protodef_snippet_5fsample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024snippet_sample.proto\022\025StorageEngineIns"
  "tance\"\264\031\n\016SnippetRequest\022\?\n\004type\030\001 \001(\01621"
  ".StorageEngineInstance.SnippetRequest.Sn"
  "ippetType\022\020\n\010query_id\030\002 \001(\005\022\017\n\007work_id\030\003"
  " \001(\005\022C\n\nquery_info\030\004 \001(\0132/.StorageEngine"
  "Instance.SnippetRequest.QueryInfo\022E\n\013sch"
  "ema_info\030\005 \001(\01320.StorageEngineInstance.S"
  "nippetRequest.SchemaInfo\022\?\n\010sst_info\030\006 \003"
  "(\0132-.StorageEngineInstance.SnippetReques"
  "t.SstInfo\022\?\n\010wal_info\030\007 \001(\0132-.StorageEng"
  "ineInstance.SnippetRequest.WalInfo\022E\n\013re"
  "sult_info\030\010 \001(\01320.StorageEngineInstance."
  "SnippetRequest.ResultInfo\032\322\003\n\006Filter\022D\n\002"
  "lv\030\001 \001(\01328.StorageEngineInstance.Snippet"
  "Request.Filter.FilterValue\022G\n\010operator\030\002"
  " \001(\01625.StorageEngineInstance.SnippetRequ"
  "est.Filter.OperType\022D\n\002rv\030\003 \001(\01328.Storag"
  "eEngineInstance.SnippetRequest.Filter.Fi"
  "lterValue\032[\n\013FilterValue\022=\n\004type\030\001 \003(\0162/"
  ".StorageEngineInstance.SnippetRequest.Va"
  "lueType\022\r\n\005value\030\002 \003(\t\"\225\001\n\010OperType\022\006\n\002G"
  "E\020\000\022\006\n\002LE\020\001\022\006\n\002GT\020\002\022\006\n\002LT\020\003\022\006\n\002EQ\020\004\022\006\n\002N"
  "E\020\005\022\010\n\004LIKE\020\006\022\013\n\007NOTLIKE\020\007\022\013\n\007BETWEEN\020\010\022"
  "\006\n\002IN\020\t\022\t\n\005NOTIN\020\n\022\006\n\002IS\020\013\022\t\n\005ISNOT\020\014\022\007\n"
  "\003AND\020\r\022\006\n\002OR\020\016\032\252\002\n\nProjection\022P\n\013select_"
  "type\030\001 \001(\0162;.StorageEngineInstance.Snipp"
  "etRequest.Projection.SelectType\022\r\n\005value"
  "\030\002 \003(\t\022C\n\nvalue_type\030\003 \003(\0162/.StorageEngi"
  "neInstance.SnippetRequest.ValueType\"v\n\nS"
  "electType\022\016\n\nCOLUMNNAME\020\000\022\007\n\003SUM\020\001\022\007\n\003AV"
  "G\020\002\022\t\n\005COUNT\020\003\022\r\n\tCOUNTSTAR\020\004\022\021\n\rCOUNTDI"
  "STINCT\020\005\022\007\n\003TOP\020\006\022\007\n\003MIN\020\007\022\007\n\003MAX\020\010\032\220\001\n\005"
  "Order\022M\n\tascending\030\001 \003(\0162:.StorageEngine"
  "Instance.SnippetRequest.Order.OrderDirec"
  "tion\022\023\n\013column_name\030\002 \003(\t\"#\n\016OrderDirect"
  "ion\022\007\n\003ASC\020\000\022\010\n\004DESC\020\001\032\246\001\n\nDependency\022O\n"
  "\025dependency_projection\030\001 \003(\01320.StorageEn"
  "gineInstance.SnippetRequest.Projection\022G"
  "\n\021dependency_filter\030\002 \003(\0132,.StorageEngin"
  "eInstance.SnippetRequest.Filter\032\'\n\005Limit"
  "\022\016\n\006offset\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\032.\n\003Ref\022"
  "\022\n\ntable_name\030\001 \001(\t\022\023\n\013column_name\030\002 \001(\t"
  "\032\357\003\n\tQueryInfo\022\022\n\ntable_name\030\001 \003(\t\022\?\n\tfi"
  "ltering\030\002 \003(\0132,.StorageEngineInstance.Sn"
  "ippetRequest.Filter\022D\n\nprojection\030\003 \003(\0132"
  "0.StorageEngineInstance.SnippetRequest.P"
  "rojection\022<\n\006having\030\004 \003(\0132,.StorageEngin"
  "eInstance.SnippetRequest.Filter\022\020\n\010group"
  "_by\030\005 \003(\t\022=\n\010order_by\030\006 \001(\0132+.StorageEng"
  "ineInstance.SnippetRequest.Order\022:\n\005limi"
  "t\030\007 \001(\0132+.StorageEngineInstance.SnippetR"
  "equest.Limit\022D\n\ndependency\030\010 \001(\01320.Stora"
  "geEngineInstance.SnippetRequest.Dependen"
  "cy\0226\n\003ref\030\t \001(\0132).StorageEngineInstance."
  "SnippetRequest.Ref\032\336\001\n\nSchemaInfo\022L\n\013col"
  "umn_list\030\001 \003(\01327.StorageEngineInstance.S"
  "nippetRequest.SchemaInfo.Column\022\032\n\022table"
  "_index_number\030\002 \001(\005\032f\n\006Column\022\014\n\004name\030\001 "
  "\001(\t\022\014\n\004type\030\003 \001(\005\022\016\n\006length\030\002 \001(\005\022\017\n\007pri"
  "mary\030\004 \001(\010\022\r\n\005index\030\005 \001(\010\022\020\n\010nullable\030\006 "
  "\001(\010\032\220\002\n\007SstInfo\022\020\n\010sst_name\030\001 \001(\t\022>\n\003csd"
  "\030\002 \003(\01321.StorageEngineInstance.SnippetRe"
  "quest.SstInfo.CSD\022\027\n\017sst_block_count\030\003 \001"
  "(\005\032\231\001\n\003CSD\022\016\n\006csd_id\030\001 \001(\t\022\021\n\tpartition\030"
  "\002 \001(\t\022F\n\005block\030\003 \003(\01327.StorageEngineInst"
  "ance.SnippetRequest.SstInfo.CSD.Block\032\'\n"
  "\005Block\022\016\n\006offset\030\001 \003(\003\022\016\n\006length\030\002 \003(\005\032L"
  "\n\007WalInfo\022\023\n\013deleted_key\030\001 \003(\t\022\024\n\014insert"
  "ed_key\030\002 \003(\t\022\026\n\016inserted_value\030\003 \003(\t\032R\n\n"
  "ResultInfo\022\023\n\013table_alias\030\001 \001(\t\022\024\n\014colum"
  "n_alias\030\002 \003(\t\022\031\n\021total_block_count\030\003 \001(\005"
  "\"\236\002\n\013SnippetType\022\r\n\tFULL_SCAN\020\000\022\016\n\nINDEX"
  "_SCAN\020\001\022\024\n\020INDEX_TABLE_SCAN\020\002\022\017\n\013AGGREGA"
  "TION\020\003\022\n\n\006FILTER\020\004\022\016\n\nINNER_JOIN\020\005\022\023\n\017LE"
  "FT_OUTER_JOIN\020\006\022\024\n\020RIGHT_OUTER_JOIN\020\007\022\016\n"
  "\nCROSS_JOIN\020\010\022\t\n\005UNION\020\t\022\006\n\002IN\020\n\022\t\n\005EXIS"
  "T\020\013\022\031\n\025DEPENDENCY_INNER_JOIN\020\014\022\024\n\020DEPEND"
  "ENCY_EXIST\020\r\022\021\n\rDEPENDENCY_IN\020\016\022\020\n\014TMAX_"
  "SNIPPET\020\017\"\250\001\n\tValueType\022\010\n\004INT8\020\000\022\t\n\005INT"
  "16\020\001\022\t\n\005INT32\020\002\022\t\n\005INT64\020\003\022\013\n\007FLOAT32\020\004\022"
  "\n\n\006DOUBLE\020\005\022\013\n\007DECIMAL\020\006\022\010\n\004DATE\020\007\022\r\n\tTI"
  "MESTAMP\020\010\022\n\n\006STRING\020\t\022\n\n\006COLUMN\020\n\022\014\n\010OPE"
  "RATOR\020\013\022\013\n\007BOOLEAN\020\014\"`\n\021QueryStringResul"
  "t\022\024\n\014query_result\030\001 \001(\t\022\031\n\021scanned_row_c"
  "ount\030\002 \001(\005\022\032\n\022filtered_row_count\030\003 \001(\0052\211"
  "\001\n\026StorageEngineInterface\022o\n\030OffloadingQ"
  "ueryInterface\022%.StorageEngineInstance.Sn"
  "ippetRequest\032(.StorageEngineInstance.Que"
  "ryStringResult\"\000(\001B6\n\026io.grpc.snippet_sa"
  "mpleB\024snippet_sample_ProtoP\001\242\002\003SSPb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_snippet_5fsample_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snippet_5fsample_2eproto = {
  false, false, 3602, descriptor_table_protodef_snippet_5fsample_2eproto, "snippet_sample.proto", 
  &descriptor_table_snippet_5fsample_2eproto_once, nullptr, 0, 17,
  schemas, file_default_instances, TableStruct_snippet_5fsample_2eproto::offsets,
  file_level_metadata_snippet_5fsample_2eproto, file_level_enum_descriptors_snippet_5fsample_2eproto, file_level_service_descriptors_snippet_5fsample_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_snippet_5fsample_2eproto_getter() {
  return &descriptor_table_snippet_5fsample_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_snippet_5fsample_2eproto(&descriptor_table_snippet_5fsample_2eproto);
namespace StorageEngineInstance {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_Filter_OperType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[0];
}
bool SnippetRequest_Filter_OperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::GE;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::LE;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::GT;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::LT;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::EQ;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::NE;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::LIKE;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::NOTLIKE;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::BETWEEN;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::IN;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::NOTIN;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::IS;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::ISNOT;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::AND;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::OR;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::OperType_MIN;
constexpr SnippetRequest_Filter_OperType SnippetRequest_Filter::OperType_MAX;
constexpr int SnippetRequest_Filter::OperType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_Projection_SelectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[1];
}
bool SnippetRequest_Projection_SelectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::COLUMNNAME;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::SUM;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::AVG;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::COUNT;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::COUNTSTAR;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::COUNTDISTINCT;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::TOP;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::MIN;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::MAX;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::SelectType_MIN;
constexpr SnippetRequest_Projection_SelectType SnippetRequest_Projection::SelectType_MAX;
constexpr int SnippetRequest_Projection::SelectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_Order_OrderDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[2];
}
bool SnippetRequest_Order_OrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SnippetRequest_Order_OrderDirection SnippetRequest_Order::ASC;
constexpr SnippetRequest_Order_OrderDirection SnippetRequest_Order::DESC;
constexpr SnippetRequest_Order_OrderDirection SnippetRequest_Order::OrderDirection_MIN;
constexpr SnippetRequest_Order_OrderDirection SnippetRequest_Order::OrderDirection_MAX;
constexpr int SnippetRequest_Order::OrderDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_SnippetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[3];
}
bool SnippetRequest_SnippetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SnippetRequest_SnippetType SnippetRequest::FULL_SCAN;
constexpr SnippetRequest_SnippetType SnippetRequest::INDEX_SCAN;
constexpr SnippetRequest_SnippetType SnippetRequest::INDEX_TABLE_SCAN;
constexpr SnippetRequest_SnippetType SnippetRequest::AGGREGATION;
constexpr SnippetRequest_SnippetType SnippetRequest::FILTER;
constexpr SnippetRequest_SnippetType SnippetRequest::INNER_JOIN;
constexpr SnippetRequest_SnippetType SnippetRequest::LEFT_OUTER_JOIN;
constexpr SnippetRequest_SnippetType SnippetRequest::RIGHT_OUTER_JOIN;
constexpr SnippetRequest_SnippetType SnippetRequest::CROSS_JOIN;
constexpr SnippetRequest_SnippetType SnippetRequest::UNION;
constexpr SnippetRequest_SnippetType SnippetRequest::IN;
constexpr SnippetRequest_SnippetType SnippetRequest::EXIST;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_INNER_JOIN;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_EXIST;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_IN;
constexpr SnippetRequest_SnippetType SnippetRequest::TMAX_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MIN;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MAX;
constexpr int SnippetRequest::SnippetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[4];
}
bool SnippetRequest_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SnippetRequest_ValueType SnippetRequest::INT8;
constexpr SnippetRequest_ValueType SnippetRequest::INT16;
constexpr SnippetRequest_ValueType SnippetRequest::INT32;
constexpr SnippetRequest_ValueType SnippetRequest::INT64;
constexpr SnippetRequest_ValueType SnippetRequest::FLOAT32;
constexpr SnippetRequest_ValueType SnippetRequest::DOUBLE;
constexpr SnippetRequest_ValueType SnippetRequest::DECIMAL;
constexpr SnippetRequest_ValueType SnippetRequest::DATE;
constexpr SnippetRequest_ValueType SnippetRequest::TIMESTAMP;
constexpr SnippetRequest_ValueType SnippetRequest::STRING;
constexpr SnippetRequest_ValueType SnippetRequest::COLUMN;
constexpr SnippetRequest_ValueType SnippetRequest::OPERATOR;
constexpr SnippetRequest_ValueType SnippetRequest::BOOLEAN;
constexpr SnippetRequest_ValueType SnippetRequest::ValueType_MIN;
constexpr SnippetRequest_ValueType SnippetRequest::ValueType_MAX;
constexpr int SnippetRequest::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SnippetRequest_Filter_FilterValue::_Internal {
 public:
};

SnippetRequest_Filter_FilterValue::SnippetRequest_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  type_(arena),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
}
SnippetRequest_Filter_FilterValue::SnippetRequest_Filter_FilterValue(const SnippetRequest_Filter_FilterValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      type_(from.type_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
}

inline void SnippetRequest_Filter_FilterValue::SharedCtor() {
}

SnippetRequest_Filter_FilterValue::~SnippetRequest_Filter_FilterValue() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_Filter_FilterValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnippetRequest_Filter_FilterValue::ArenaDtor(void* object) {
  SnippetRequest_Filter_FilterValue* _this = reinterpret_cast< SnippetRequest_Filter_FilterValue* >(object);
  (void)_this;
}
void SnippetRequest_Filter_FilterValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_Filter_FilterValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_Filter_FilterValue::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_Filter_FilterValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.SnippetRequest.ValueType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_type(static_cast<::StorageEngineInstance::SnippetRequest_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.Filter.FilterValue.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_Filter_FilterValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.ValueType type = 1;
  {
    int byte_size = _type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, type_, byte_size, target);
    }
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.Filter.FilterValue.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
  return target;
}

size_t SnippetRequest_Filter_FilterValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.ValueType type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_Filter_FilterValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_Filter_FilterValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_Filter_FilterValue::GetClassData() const { return &_class_data_; }

void SnippetRequest_Filter_FilterValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_Filter_FilterValue *>(to)->MergeFrom(
      static_cast<const SnippetRequest_Filter_FilterValue &>(from));
}


void SnippetRequest_Filter_FilterValue::MergeFrom(const SnippetRequest_Filter_FilterValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_Filter_FilterValue::CopyFrom(const SnippetRequest_Filter_FilterValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.Filter.FilterValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_Filter_FilterValue::IsInitialized() const {
  return true;
}

void SnippetRequest_Filter_FilterValue::InternalSwap(SnippetRequest_Filter_FilterValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  type_.InternalSwap(&other->type_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_Filter_FilterValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[0]);
}

// ===================================================================

class SnippetRequest_Filter::_Internal {
 public:
  static const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& lv(const SnippetRequest_Filter* msg);
  static const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue& rv(const SnippetRequest_Filter* msg);
};

const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue&
SnippetRequest_Filter::_Internal::lv(const SnippetRequest_Filter* msg) {
  return *msg->lv_;
}
const ::StorageEngineInstance::SnippetRequest_Filter_FilterValue&
SnippetRequest_Filter::_Internal::rv(const SnippetRequest_Filter* msg) {
  return *msg->rv_;
}
SnippetRequest_Filter::SnippetRequest_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.Filter)
}
SnippetRequest_Filter::SnippetRequest_Filter(const SnippetRequest_Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lv()) {
    lv_ = new ::StorageEngineInstance::SnippetRequest_Filter_FilterValue(*from.lv_);
  } else {
    lv_ = nullptr;
  }
  if (from._internal_has_rv()) {
    rv_ = new ::StorageEngineInstance::SnippetRequest_Filter_FilterValue(*from.rv_);
  } else {
    rv_ = nullptr;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.Filter)
}

inline void SnippetRequest_Filter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&lv_)) + sizeof(operator__));
}

SnippetRequest_Filter::~SnippetRequest_Filter() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.Filter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lv_;
  if (this != internal_default_instance()) delete rv_;
}

void SnippetRequest_Filter::ArenaDtor(void* object) {
  SnippetRequest_Filter* _this = reinterpret_cast< SnippetRequest_Filter* >(object);
  (void)_this;
}
void SnippetRequest_Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lv_ != nullptr) {
    delete lv_;
  }
  lv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rv_ != nullptr) {
    delete rv_;
  }
  rv_ = nullptr;
  operator__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.SnippetRequest.Filter.FilterValue lv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.Filter.OperType operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::StorageEngineInstance::SnippetRequest_Filter_OperType>(val));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.Filter.FilterValue rv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.SnippetRequest.Filter.FilterValue lv = 1;
  if (this->_internal_has_lv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lv(this), target, stream);
  }

  // .StorageEngineInstance.SnippetRequest.Filter.OperType operator = 2;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operator_(), target);
  }

  // .StorageEngineInstance.SnippetRequest.Filter.FilterValue rv = 3;
  if (this->_internal_has_rv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.Filter)
  return target;
}

size_t SnippetRequest_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .StorageEngineInstance.SnippetRequest.Filter.FilterValue lv = 1;
  if (this->_internal_has_lv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lv_);
  }

  // .StorageEngineInstance.SnippetRequest.Filter.FilterValue rv = 3;
  if (this->_internal_has_rv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rv_);
  }

  // .StorageEngineInstance.SnippetRequest.Filter.OperType operator = 2;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_Filter::GetClassData() const { return &_class_data_; }

void SnippetRequest_Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_Filter *>(to)->MergeFrom(
      static_cast<const SnippetRequest_Filter &>(from));
}


void SnippetRequest_Filter::MergeFrom(const SnippetRequest_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lv()) {
    _internal_mutable_lv()->::StorageEngineInstance::SnippetRequest_Filter_FilterValue::MergeFrom(from._internal_lv());
  }
  if (from._internal_has_rv()) {
    _internal_mutable_rv()->::StorageEngineInstance::SnippetRequest_Filter_FilterValue::MergeFrom(from._internal_rv());
  }
  if (from._internal_operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_Filter::CopyFrom(const SnippetRequest_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_Filter::IsInitialized() const {
  return true;
}

void SnippetRequest_Filter::InternalSwap(SnippetRequest_Filter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest_Filter, operator__)
      + sizeof(SnippetRequest_Filter::operator__)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest_Filter, lv_)>(
          reinterpret_cast<char*>(&lv_),
          reinterpret_cast<char*>(&other->lv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_Filter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[1]);
}

// ===================================================================

class SnippetRequest_Projection::_Internal {
 public:
};

SnippetRequest_Projection::SnippetRequest_Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena),
  value_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.Projection)
}
SnippetRequest_Projection::SnippetRequest_Projection(const SnippetRequest_Projection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_),
      value_type_(from.value_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  select_type_ = from.select_type_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.Projection)
}

inline void SnippetRequest_Projection::SharedCtor() {
select_type_ = 0;
}

SnippetRequest_Projection::~SnippetRequest_Projection() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.Projection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_Projection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnippetRequest_Projection::ArenaDtor(void* object) {
  SnippetRequest_Projection* _this = reinterpret_cast< SnippetRequest_Projection* >(object);
  (void)_this;
}
void SnippetRequest_Projection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_Projection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.Projection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  value_type_.Clear();
  select_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_Projection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.SnippetRequest.Projection.SelectType select_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_select_type(static_cast<::StorageEngineInstance::SnippetRequest_Projection_SelectType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.Projection.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.SnippetRequest.ValueType value_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_value_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_value_type(static_cast<::StorageEngineInstance::SnippetRequest_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_Projection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.Projection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.SnippetRequest.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_select_type(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.Projection.value");
    target = stream->WriteString(2, s, target);
  }

  // repeated .StorageEngineInstance.SnippetRequest.ValueType value_type = 3;
  {
    int byte_size = _value_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, value_type_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.Projection)
  return target;
}

size_t SnippetRequest_Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.Projection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // repeated .StorageEngineInstance.SnippetRequest.ValueType value_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_value_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_value_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .StorageEngineInstance.SnippetRequest.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_select_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_Projection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_Projection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_Projection::GetClassData() const { return &_class_data_; }

void SnippetRequest_Projection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_Projection *>(to)->MergeFrom(
      static_cast<const SnippetRequest_Projection &>(from));
}


void SnippetRequest_Projection::MergeFrom(const SnippetRequest_Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  value_type_.MergeFrom(from.value_type_);
  if (from._internal_select_type() != 0) {
    _internal_set_select_type(from._internal_select_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_Projection::CopyFrom(const SnippetRequest_Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_Projection::IsInitialized() const {
  return true;
}

void SnippetRequest_Projection::InternalSwap(SnippetRequest_Projection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  value_type_.InternalSwap(&other->value_type_);
  swap(select_type_, other->select_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_Projection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[2]);
}

// ===================================================================

class SnippetRequest_Order::_Internal {
 public:
};

SnippetRequest_Order::SnippetRequest_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ascending_(arena),
  column_name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.Order)
}
SnippetRequest_Order::SnippetRequest_Order(const SnippetRequest_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ascending_(from.ascending_),
      column_name_(from.column_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.Order)
}

inline void SnippetRequest_Order::SharedCtor() {
}

SnippetRequest_Order::~SnippetRequest_Order() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.Order)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnippetRequest_Order::ArenaDtor(void* object) {
  SnippetRequest_Order* _this = reinterpret_cast< SnippetRequest_Order* >(object);
  (void)_this;
}
void SnippetRequest_Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.Order)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ascending_.Clear();
  column_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.SnippetRequest.Order.OrderDirection ascending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ascending(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ascending(static_cast<::StorageEngineInstance::SnippetRequest_Order_OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.Order.column_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_Order::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.Order)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.Order.OrderDirection ascending = 1;
  {
    int byte_size = _ascending_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, ascending_, byte_size, target);
    }
  }

  // repeated string column_name = 2;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.Order.column_name");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.Order)
  return target;
}

size_t SnippetRequest_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.Order)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.Order.OrderDirection ascending = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ascending_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ascending(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ascending_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string column_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_name_.size());
  for (int i = 0, n = column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_Order::GetClassData() const { return &_class_data_; }

void SnippetRequest_Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_Order *>(to)->MergeFrom(
      static_cast<const SnippetRequest_Order &>(from));
}


void SnippetRequest_Order::MergeFrom(const SnippetRequest_Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.Order)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ascending_.MergeFrom(from.ascending_);
  column_name_.MergeFrom(from.column_name_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_Order::CopyFrom(const SnippetRequest_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_Order::IsInitialized() const {
  return true;
}

void SnippetRequest_Order::InternalSwap(SnippetRequest_Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ascending_.InternalSwap(&other->ascending_);
  column_name_.InternalSwap(&other->column_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_Order::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[3]);
}

// ===================================================================

class SnippetRequest_Dependency::_Internal {
 public:
};

SnippetRequest_Dependency::SnippetRequest_Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dependency_projection_(arena),
  dependency_filter_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.Dependency)
}
SnippetRequest_Dependency::SnippetRequest_Dependency(const SnippetRequest_Dependency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dependency_projection_(from.dependency_projection_),
      dependency_filter_(from.dependency_filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.Dependency)
}

inline void SnippetRequest_Dependency::SharedCtor() {
}

SnippetRequest_Dependency::~SnippetRequest_Dependency() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.Dependency)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_Dependency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnippetRequest_Dependency::ArenaDtor(void* object) {
  SnippetRequest_Dependency* _this = reinterpret_cast< SnippetRequest_Dependency* >(object);
  (void)_this;
}
void SnippetRequest_Dependency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_Dependency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.Dependency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependency_projection_.Clear();
  dependency_filter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_Dependency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.SnippetRequest.Projection dependency_projection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.SnippetRequest.Filter dependency_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_Dependency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.Dependency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.Projection dependency_projection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependency_projection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_dependency_projection(i), target, stream);
  }

  // repeated .StorageEngineInstance.SnippetRequest.Filter dependency_filter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependency_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dependency_filter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.Dependency)
  return target;
}

size_t SnippetRequest_Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.Dependency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.Projection dependency_projection = 1;
  total_size += 1UL * this->_internal_dependency_projection_size();
  for (const auto& msg : this->dependency_projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .StorageEngineInstance.SnippetRequest.Filter dependency_filter = 2;
  total_size += 1UL * this->_internal_dependency_filter_size();
  for (const auto& msg : this->dependency_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_Dependency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_Dependency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_Dependency::GetClassData() const { return &_class_data_; }

void SnippetRequest_Dependency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_Dependency *>(to)->MergeFrom(
      static_cast<const SnippetRequest_Dependency &>(from));
}


void SnippetRequest_Dependency::MergeFrom(const SnippetRequest_Dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dependency_projection_.MergeFrom(from.dependency_projection_);
  dependency_filter_.MergeFrom(from.dependency_filter_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_Dependency::CopyFrom(const SnippetRequest_Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_Dependency::IsInitialized() const {
  return true;
}

void SnippetRequest_Dependency::InternalSwap(SnippetRequest_Dependency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dependency_projection_.InternalSwap(&other->dependency_projection_);
  dependency_filter_.InternalSwap(&other->dependency_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_Dependency::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[4]);
}

// ===================================================================

class SnippetRequest_Limit::_Internal {
 public:
};

SnippetRequest_Limit::SnippetRequest_Limit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.Limit)
}
SnippetRequest_Limit::SnippetRequest_Limit(const SnippetRequest_Limit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.Limit)
}

inline void SnippetRequest_Limit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

SnippetRequest_Limit::~SnippetRequest_Limit() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.Limit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_Limit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnippetRequest_Limit::ArenaDtor(void* object) {
  SnippetRequest_Limit* _this = reinterpret_cast< SnippetRequest_Limit* >(object);
  (void)_this;
}
void SnippetRequest_Limit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_Limit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.Limit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_Limit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_Limit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.Limit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.Limit)
  return target;
}

size_t SnippetRequest_Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.Limit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_Limit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_Limit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_Limit::GetClassData() const { return &_class_data_; }

void SnippetRequest_Limit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_Limit *>(to)->MergeFrom(
      static_cast<const SnippetRequest_Limit &>(from));
}


void SnippetRequest_Limit::MergeFrom(const SnippetRequest_Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_Limit::CopyFrom(const SnippetRequest_Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_Limit::IsInitialized() const {
  return true;
}

void SnippetRequest_Limit::InternalSwap(SnippetRequest_Limit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest_Limit, length_)
      + sizeof(SnippetRequest_Limit::length_)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest_Limit, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_Limit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[5]);
}

// ===================================================================

class SnippetRequest_Ref::_Internal {
 public:
};

SnippetRequest_Ref::SnippetRequest_Ref(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.Ref)
}
SnippetRequest_Ref::SnippetRequest_Ref(const SnippetRequest_Ref& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    column_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column_name().empty()) {
    column_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.Ref)
}

inline void SnippetRequest_Ref::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  column_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnippetRequest_Ref::~SnippetRequest_Ref() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.Ref)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_Ref::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnippetRequest_Ref::ArenaDtor(void* object) {
  SnippetRequest_Ref* _this = reinterpret_cast< SnippetRequest_Ref* >(object);
  (void)_this;
}
void SnippetRequest_Ref::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_Ref::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_Ref::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.Ref)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmpty();
  column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_Ref::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.Ref.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string column_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.Ref.column_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_Ref::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.Ref)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.Ref.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // string column_name = 2;
  if (!this->_internal_column_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.Ref.column_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_column_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.Ref)
  return target;
}

size_t SnippetRequest_Ref::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.Ref)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // string column_name = 2;
  if (!this->_internal_column_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_Ref::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_Ref::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_Ref::GetClassData() const { return &_class_data_; }

void SnippetRequest_Ref::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_Ref *>(to)->MergeFrom(
      static_cast<const SnippetRequest_Ref &>(from));
}


void SnippetRequest_Ref::MergeFrom(const SnippetRequest_Ref& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.Ref)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_column_name().empty()) {
    _internal_set_column_name(from._internal_column_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_Ref::CopyFrom(const SnippetRequest_Ref& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.Ref)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_Ref::IsInitialized() const {
  return true;
}

void SnippetRequest_Ref::InternalSwap(SnippetRequest_Ref* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &column_name_, lhs_arena,
      &other->column_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_Ref::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[6]);
}

// ===================================================================

class SnippetRequest_QueryInfo::_Internal {
 public:
  static const ::StorageEngineInstance::SnippetRequest_Order& order_by(const SnippetRequest_QueryInfo* msg);
  static const ::StorageEngineInstance::SnippetRequest_Limit& limit(const SnippetRequest_QueryInfo* msg);
  static const ::StorageEngineInstance::SnippetRequest_Dependency& dependency(const SnippetRequest_QueryInfo* msg);
  static const ::StorageEngineInstance::SnippetRequest_Ref& ref(const SnippetRequest_QueryInfo* msg);
};

const ::StorageEngineInstance::SnippetRequest_Order&
SnippetRequest_QueryInfo::_Internal::order_by(const SnippetRequest_QueryInfo* msg) {
  return *msg->order_by_;
}
const ::StorageEngineInstance::SnippetRequest_Limit&
SnippetRequest_QueryInfo::_Internal::limit(const SnippetRequest_QueryInfo* msg) {
  return *msg->limit_;
}
const ::StorageEngineInstance::SnippetRequest_Dependency&
SnippetRequest_QueryInfo::_Internal::dependency(const SnippetRequest_QueryInfo* msg) {
  return *msg->dependency_;
}
const ::StorageEngineInstance::SnippetRequest_Ref&
SnippetRequest_QueryInfo::_Internal::ref(const SnippetRequest_QueryInfo* msg) {
  return *msg->ref_;
}
SnippetRequest_QueryInfo::SnippetRequest_QueryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_name_(arena),
  filtering_(arena),
  projection_(arena),
  having_(arena),
  group_by_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.QueryInfo)
}
SnippetRequest_QueryInfo::SnippetRequest_QueryInfo(const SnippetRequest_QueryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_name_(from.table_name_),
      filtering_(from.filtering_),
      projection_(from.projection_),
      having_(from.having_),
      group_by_(from.group_by_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order_by()) {
    order_by_ = new ::StorageEngineInstance::SnippetRequest_Order(*from.order_by_);
  } else {
    order_by_ = nullptr;
  }
  if (from._internal_has_limit()) {
    limit_ = new ::StorageEngineInstance::SnippetRequest_Limit(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_dependency()) {
    dependency_ = new ::StorageEngineInstance::SnippetRequest_Dependency(*from.dependency_);
  } else {
    dependency_ = nullptr;
  }
  if (from._internal_has_ref()) {
    ref_ = new ::StorageEngineInstance::SnippetRequest_Ref(*from.ref_);
  } else {
    ref_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.QueryInfo)
}

inline void SnippetRequest_QueryInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&order_by_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ref_) -
    reinterpret_cast<char*>(&order_by_)) + sizeof(ref_));
}

SnippetRequest_QueryInfo::~SnippetRequest_QueryInfo() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.QueryInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_QueryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete order_by_;
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete dependency_;
  if (this != internal_default_instance()) delete ref_;
}

void SnippetRequest_QueryInfo::ArenaDtor(void* object) {
  SnippetRequest_QueryInfo* _this = reinterpret_cast< SnippetRequest_QueryInfo* >(object);
  (void)_this;
}
void SnippetRequest_QueryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_QueryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_QueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.QueryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.Clear();
  filtering_.Clear();
  projection_.Clear();
  having_.Clear();
  group_by_.Clear();
  if (GetArenaForAllocation() == nullptr && order_by_ != nullptr) {
    delete order_by_;
  }
  order_by_ = nullptr;
  if (GetArenaForAllocation() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && dependency_ != nullptr) {
    delete dependency_;
  }
  dependency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ref_ != nullptr) {
    delete ref_;
  }
  ref_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_QueryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.QueryInfo.table_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.SnippetRequest.Filter filtering = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filtering(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.SnippetRequest.Projection projection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.SnippetRequest.Filter having = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_having(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.QueryInfo.group_by"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.Order order_by = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.Limit limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.Dependency dependency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.Ref ref = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_QueryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.QueryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string table_name = 1;
  for (int i = 0, n = this->_internal_table_name_size(); i < n; i++) {
    const auto& s = this->_internal_table_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.QueryInfo.table_name");
    target = stream->WriteString(1, s, target);
  }

  // repeated .StorageEngineInstance.SnippetRequest.Filter filtering = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filtering_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_filtering(i), target, stream);
  }

  // repeated .StorageEngineInstance.SnippetRequest.Projection projection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_projection(i), target, stream);
  }

  // repeated .StorageEngineInstance.SnippetRequest.Filter having = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_having_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_having(i), target, stream);
  }

  // repeated string group_by = 5;
  for (int i = 0, n = this->_internal_group_by_size(); i < n; i++) {
    const auto& s = this->_internal_group_by(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.QueryInfo.group_by");
    target = stream->WriteString(5, s, target);
  }

  // .StorageEngineInstance.SnippetRequest.Order order_by = 6;
  if (this->_internal_has_order_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::order_by(this), target, stream);
  }

  // .StorageEngineInstance.SnippetRequest.Limit limit = 7;
  if (this->_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::limit(this), target, stream);
  }

  // .StorageEngineInstance.SnippetRequest.Dependency dependency = 8;
  if (this->_internal_has_dependency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::dependency(this), target, stream);
  }

  // .StorageEngineInstance.SnippetRequest.Ref ref = 9;
  if (this->_internal_has_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ref(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.QueryInfo)
  return target;
}

size_t SnippetRequest_QueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.QueryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string table_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(table_name_.size());
  for (int i = 0, n = table_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      table_name_.Get(i));
  }

  // repeated .StorageEngineInstance.SnippetRequest.Filter filtering = 2;
  total_size += 1UL * this->_internal_filtering_size();
  for (const auto& msg : this->filtering_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .StorageEngineInstance.SnippetRequest.Projection projection = 3;
  total_size += 1UL * this->_internal_projection_size();
  for (const auto& msg : this->projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .StorageEngineInstance.SnippetRequest.Filter having = 4;
  total_size += 1UL * this->_internal_having_size();
  for (const auto& msg : this->having_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string group_by = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_.size());
  for (int i = 0, n = group_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_.Get(i));
  }

  // .StorageEngineInstance.SnippetRequest.Order order_by = 6;
  if (this->_internal_has_order_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_by_);
  }

  // .StorageEngineInstance.SnippetRequest.Limit limit = 7;
  if (this->_internal_has_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // .StorageEngineInstance.SnippetRequest.Dependency dependency = 8;
  if (this->_internal_has_dependency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dependency_);
  }

  // .StorageEngineInstance.SnippetRequest.Ref ref = 9;
  if (this->_internal_has_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_QueryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_QueryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_QueryInfo::GetClassData() const { return &_class_data_; }

void SnippetRequest_QueryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_QueryInfo *>(to)->MergeFrom(
      static_cast<const SnippetRequest_QueryInfo &>(from));
}


void SnippetRequest_QueryInfo::MergeFrom(const SnippetRequest_QueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  table_name_.MergeFrom(from.table_name_);
  filtering_.MergeFrom(from.filtering_);
  projection_.MergeFrom(from.projection_);
  having_.MergeFrom(from.having_);
  group_by_.MergeFrom(from.group_by_);
  if (from._internal_has_order_by()) {
    _internal_mutable_order_by()->::StorageEngineInstance::SnippetRequest_Order::MergeFrom(from._internal_order_by());
  }
  if (from._internal_has_limit()) {
    _internal_mutable_limit()->::StorageEngineInstance::SnippetRequest_Limit::MergeFrom(from._internal_limit());
  }
  if (from._internal_has_dependency()) {
    _internal_mutable_dependency()->::StorageEngineInstance::SnippetRequest_Dependency::MergeFrom(from._internal_dependency());
  }
  if (from._internal_has_ref()) {
    _internal_mutable_ref()->::StorageEngineInstance::SnippetRequest_Ref::MergeFrom(from._internal_ref());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_QueryInfo::CopyFrom(const SnippetRequest_QueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_QueryInfo::IsInitialized() const {
  return true;
}

void SnippetRequest_QueryInfo::InternalSwap(SnippetRequest_QueryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_name_.InternalSwap(&other->table_name_);
  filtering_.InternalSwap(&other->filtering_);
  projection_.InternalSwap(&other->projection_);
  having_.InternalSwap(&other->having_);
  group_by_.InternalSwap(&other->group_by_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest_QueryInfo, ref_)
      + sizeof(SnippetRequest_QueryInfo::ref_)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest_QueryInfo, order_by_)>(
          reinterpret_cast<char*>(&order_by_),
          reinterpret_cast<char*>(&other->order_by_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_QueryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[7]);
}

// ===================================================================

class SnippetRequest_SchemaInfo_Column::_Internal {
 public:
};

SnippetRequest_SchemaInfo_Column::SnippetRequest_SchemaInfo_Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
}
SnippetRequest_SchemaInfo_Column::SnippetRequest_SchemaInfo_Column(const SnippetRequest_SchemaInfo_Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&nullable_) -
    reinterpret_cast<char*>(&length_)) + sizeof(nullable_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
}

inline void SnippetRequest_SchemaInfo_Column::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nullable_) -
    reinterpret_cast<char*>(&length_)) + sizeof(nullable_));
}

SnippetRequest_SchemaInfo_Column::~SnippetRequest_SchemaInfo_Column() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_SchemaInfo_Column::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnippetRequest_SchemaInfo_Column::ArenaDtor(void* object) {
  SnippetRequest_SchemaInfo_Column* _this = reinterpret_cast< SnippetRequest_SchemaInfo_Column* >(object);
  (void)_this;
}
void SnippetRequest_SchemaInfo_Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_SchemaInfo_Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_SchemaInfo_Column::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullable_) -
      reinterpret_cast<char*>(&length_)) + sizeof(nullable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_SchemaInfo_Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.SchemaInfo.Column.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool primary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool nullable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          nullable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_SchemaInfo_Column::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.SchemaInfo.Column.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // bool primary = 4;
  if (this->_internal_primary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_primary(), target);
  }

  // bool index = 5;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_index(), target);
  }

  // bool nullable = 6;
  if (this->_internal_nullable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_nullable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
  return target;
}

size_t SnippetRequest_SchemaInfo_Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // bool primary = 4;
  if (this->_internal_primary() != 0) {
    total_size += 1 + 1;
  }

  // bool index = 5;
  if (this->_internal_index() != 0) {
    total_size += 1 + 1;
  }

  // bool nullable = 6;
  if (this->_internal_nullable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_SchemaInfo_Column::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_SchemaInfo_Column::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_SchemaInfo_Column::GetClassData() const { return &_class_data_; }

void SnippetRequest_SchemaInfo_Column::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_SchemaInfo_Column *>(to)->MergeFrom(
      static_cast<const SnippetRequest_SchemaInfo_Column &>(from));
}


void SnippetRequest_SchemaInfo_Column::MergeFrom(const SnippetRequest_SchemaInfo_Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_primary() != 0) {
    _internal_set_primary(from._internal_primary());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_nullable() != 0) {
    _internal_set_nullable(from._internal_nullable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_SchemaInfo_Column::CopyFrom(const SnippetRequest_SchemaInfo_Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.SchemaInfo.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_SchemaInfo_Column::IsInitialized() const {
  return true;
}

void SnippetRequest_SchemaInfo_Column::InternalSwap(SnippetRequest_SchemaInfo_Column* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest_SchemaInfo_Column, nullable_)
      + sizeof(SnippetRequest_SchemaInfo_Column::nullable_)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest_SchemaInfo_Column, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_SchemaInfo_Column::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[8]);
}

// ===================================================================

class SnippetRequest_SchemaInfo::_Internal {
 public:
};

SnippetRequest_SchemaInfo::SnippetRequest_SchemaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.SchemaInfo)
}
SnippetRequest_SchemaInfo::SnippetRequest_SchemaInfo(const SnippetRequest_SchemaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_list_(from.column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_index_number_ = from.table_index_number_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.SchemaInfo)
}

inline void SnippetRequest_SchemaInfo::SharedCtor() {
table_index_number_ = 0;
}

SnippetRequest_SchemaInfo::~SnippetRequest_SchemaInfo() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.SchemaInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_SchemaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnippetRequest_SchemaInfo::ArenaDtor(void* object) {
  SnippetRequest_SchemaInfo* _this = reinterpret_cast< SnippetRequest_SchemaInfo* >(object);
  (void)_this;
}
void SnippetRequest_SchemaInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_SchemaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_SchemaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.SchemaInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_list_.Clear();
  table_index_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_SchemaInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.SnippetRequest.SchemaInfo.Column column_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 table_index_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          table_index_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_SchemaInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.SchemaInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.SchemaInfo.Column column_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_column_list(i), target, stream);
  }

  // int32 table_index_number = 2;
  if (this->_internal_table_index_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_table_index_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.SchemaInfo)
  return target;
}

size_t SnippetRequest_SchemaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.SchemaInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.SchemaInfo.Column column_list = 1;
  total_size += 1UL * this->_internal_column_list_size();
  for (const auto& msg : this->column_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 table_index_number = 2;
  if (this->_internal_table_index_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_table_index_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_SchemaInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_SchemaInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_SchemaInfo::GetClassData() const { return &_class_data_; }

void SnippetRequest_SchemaInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_SchemaInfo *>(to)->MergeFrom(
      static_cast<const SnippetRequest_SchemaInfo &>(from));
}


void SnippetRequest_SchemaInfo::MergeFrom(const SnippetRequest_SchemaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.SchemaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  column_list_.MergeFrom(from.column_list_);
  if (from._internal_table_index_number() != 0) {
    _internal_set_table_index_number(from._internal_table_index_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_SchemaInfo::CopyFrom(const SnippetRequest_SchemaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.SchemaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_SchemaInfo::IsInitialized() const {
  return true;
}

void SnippetRequest_SchemaInfo::InternalSwap(SnippetRequest_SchemaInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_list_.InternalSwap(&other->column_list_);
  swap(table_index_number_, other->table_index_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_SchemaInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[9]);
}

// ===================================================================

class SnippetRequest_SstInfo_CSD_Block::_Internal {
 public:
};

SnippetRequest_SstInfo_CSD_Block::SnippetRequest_SstInfo_CSD_Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  offset_(arena),
  length_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
}
SnippetRequest_SstInfo_CSD_Block::SnippetRequest_SstInfo_CSD_Block(const SnippetRequest_SstInfo_CSD_Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      offset_(from.offset_),
      length_(from.length_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
}

inline void SnippetRequest_SstInfo_CSD_Block::SharedCtor() {
}

SnippetRequest_SstInfo_CSD_Block::~SnippetRequest_SstInfo_CSD_Block() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_SstInfo_CSD_Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnippetRequest_SstInfo_CSD_Block::ArenaDtor(void* object) {
  SnippetRequest_SstInfo_CSD_Block* _this = reinterpret_cast< SnippetRequest_SstInfo_CSD_Block* >(object);
  (void)_this;
}
void SnippetRequest_SstInfo_CSD_Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_SstInfo_CSD_Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_SstInfo_CSD_Block::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_.Clear();
  length_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_SstInfo_CSD_Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_length(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_SstInfo_CSD_Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 offset = 1;
  {
    int byte_size = _offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_offset(), byte_size, target);
    }
  }

  // repeated int32 length = 2;
  {
    int byte_size = _length_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_length(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
  return target;
}

size_t SnippetRequest_SstInfo_CSD_Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 offset = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 length = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->length_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _length_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_SstInfo_CSD_Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_SstInfo_CSD_Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_SstInfo_CSD_Block::GetClassData() const { return &_class_data_; }

void SnippetRequest_SstInfo_CSD_Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_SstInfo_CSD_Block *>(to)->MergeFrom(
      static_cast<const SnippetRequest_SstInfo_CSD_Block &>(from));
}


void SnippetRequest_SstInfo_CSD_Block::MergeFrom(const SnippetRequest_SstInfo_CSD_Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  offset_.MergeFrom(from.offset_);
  length_.MergeFrom(from.length_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_SstInfo_CSD_Block::CopyFrom(const SnippetRequest_SstInfo_CSD_Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_SstInfo_CSD_Block::IsInitialized() const {
  return true;
}

void SnippetRequest_SstInfo_CSD_Block::InternalSwap(SnippetRequest_SstInfo_CSD_Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  offset_.InternalSwap(&other->offset_);
  length_.InternalSwap(&other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_SstInfo_CSD_Block::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[10]);
}

// ===================================================================

class SnippetRequest_SstInfo_CSD::_Internal {
 public:
};

SnippetRequest_SstInfo_CSD::SnippetRequest_SstInfo_CSD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
}
SnippetRequest_SstInfo_CSD::SnippetRequest_SstInfo_CSD(const SnippetRequest_SstInfo_CSD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_(from.block_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  csd_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    csd_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_csd_id().empty()) {
    csd_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_csd_id(), 
      GetArenaForAllocation());
  }
  partition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition().empty()) {
    partition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partition(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
}

inline void SnippetRequest_SstInfo_CSD::SharedCtor() {
csd_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  csd_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
partition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnippetRequest_SstInfo_CSD::~SnippetRequest_SstInfo_CSD() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_SstInfo_CSD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  csd_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  partition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnippetRequest_SstInfo_CSD::ArenaDtor(void* object) {
  SnippetRequest_SstInfo_CSD* _this = reinterpret_cast< SnippetRequest_SstInfo_CSD* >(object);
  (void)_this;
}
void SnippetRequest_SstInfo_CSD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_SstInfo_CSD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_SstInfo_CSD::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_.Clear();
  csd_id_.ClearToEmpty();
  partition_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_SstInfo_CSD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string csd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_csd_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.SstInfo.CSD.csd_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string partition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.SstInfo.CSD.partition"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_SstInfo_CSD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string csd_id = 1;
  if (!this->_internal_csd_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_csd_id().data(), static_cast<int>(this->_internal_csd_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.SstInfo.CSD.csd_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_csd_id(), target);
  }

  // string partition = 2;
  if (!this->_internal_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition().data(), static_cast<int>(this->_internal_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.SstInfo.CSD.partition");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partition(), target);
  }

  // repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block block = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_block(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
  return target;
}

size_t SnippetRequest_SstInfo_CSD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD.Block block = 3;
  total_size += 1UL * this->_internal_block_size();
  for (const auto& msg : this->block_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string csd_id = 1;
  if (!this->_internal_csd_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_csd_id());
  }

  // string partition = 2;
  if (!this->_internal_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_SstInfo_CSD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_SstInfo_CSD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_SstInfo_CSD::GetClassData() const { return &_class_data_; }

void SnippetRequest_SstInfo_CSD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_SstInfo_CSD *>(to)->MergeFrom(
      static_cast<const SnippetRequest_SstInfo_CSD &>(from));
}


void SnippetRequest_SstInfo_CSD::MergeFrom(const SnippetRequest_SstInfo_CSD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  block_.MergeFrom(from.block_);
  if (!from._internal_csd_id().empty()) {
    _internal_set_csd_id(from._internal_csd_id());
  }
  if (!from._internal_partition().empty()) {
    _internal_set_partition(from._internal_partition());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_SstInfo_CSD::CopyFrom(const SnippetRequest_SstInfo_CSD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.SstInfo.CSD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_SstInfo_CSD::IsInitialized() const {
  return true;
}

void SnippetRequest_SstInfo_CSD::InternalSwap(SnippetRequest_SstInfo_CSD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  block_.InternalSwap(&other->block_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &csd_id_, lhs_arena,
      &other->csd_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partition_, lhs_arena,
      &other->partition_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_SstInfo_CSD::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[11]);
}

// ===================================================================

class SnippetRequest_SstInfo::_Internal {
 public:
};

SnippetRequest_SstInfo::SnippetRequest_SstInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  csd_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.SstInfo)
}
SnippetRequest_SstInfo::SnippetRequest_SstInfo(const SnippetRequest_SstInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      csd_(from.csd_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sst_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sst_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sst_name().empty()) {
    sst_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sst_name(), 
      GetArenaForAllocation());
  }
  sst_block_count_ = from.sst_block_count_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.SstInfo)
}

inline void SnippetRequest_SstInfo::SharedCtor() {
sst_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sst_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sst_block_count_ = 0;
}

SnippetRequest_SstInfo::~SnippetRequest_SstInfo() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.SstInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_SstInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sst_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnippetRequest_SstInfo::ArenaDtor(void* object) {
  SnippetRequest_SstInfo* _this = reinterpret_cast< SnippetRequest_SstInfo* >(object);
  (void)_this;
}
void SnippetRequest_SstInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_SstInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_SstInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.SstInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csd_.Clear();
  sst_name_.ClearToEmpty();
  sst_block_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_SstInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sst_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sst_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.SstInfo.sst_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD csd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_csd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 sst_block_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sst_block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_SstInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.SstInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sst_name = 1;
  if (!this->_internal_sst_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sst_name().data(), static_cast<int>(this->_internal_sst_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.SstInfo.sst_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sst_name(), target);
  }

  // repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD csd = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_csd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_csd(i), target, stream);
  }

  // int32 sst_block_count = 3;
  if (this->_internal_sst_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sst_block_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.SstInfo)
  return target;
}

size_t SnippetRequest_SstInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.SstInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.SstInfo.CSD csd = 2;
  total_size += 1UL * this->_internal_csd_size();
  for (const auto& msg : this->csd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sst_name = 1;
  if (!this->_internal_sst_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sst_name());
  }

  // int32 sst_block_count = 3;
  if (this->_internal_sst_block_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sst_block_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_SstInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_SstInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_SstInfo::GetClassData() const { return &_class_data_; }

void SnippetRequest_SstInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_SstInfo *>(to)->MergeFrom(
      static_cast<const SnippetRequest_SstInfo &>(from));
}


void SnippetRequest_SstInfo::MergeFrom(const SnippetRequest_SstInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.SstInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  csd_.MergeFrom(from.csd_);
  if (!from._internal_sst_name().empty()) {
    _internal_set_sst_name(from._internal_sst_name());
  }
  if (from._internal_sst_block_count() != 0) {
    _internal_set_sst_block_count(from._internal_sst_block_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_SstInfo::CopyFrom(const SnippetRequest_SstInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.SstInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_SstInfo::IsInitialized() const {
  return true;
}

void SnippetRequest_SstInfo::InternalSwap(SnippetRequest_SstInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  csd_.InternalSwap(&other->csd_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sst_name_, lhs_arena,
      &other->sst_name_, rhs_arena
  );
  swap(sst_block_count_, other->sst_block_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_SstInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[12]);
}

// ===================================================================

class SnippetRequest_WalInfo::_Internal {
 public:
};

SnippetRequest_WalInfo::SnippetRequest_WalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  deleted_key_(arena),
  inserted_key_(arena),
  inserted_value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.WalInfo)
}
SnippetRequest_WalInfo::SnippetRequest_WalInfo(const SnippetRequest_WalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deleted_key_(from.deleted_key_),
      inserted_key_(from.inserted_key_),
      inserted_value_(from.inserted_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.WalInfo)
}

inline void SnippetRequest_WalInfo::SharedCtor() {
}

SnippetRequest_WalInfo::~SnippetRequest_WalInfo() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.WalInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_WalInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnippetRequest_WalInfo::ArenaDtor(void* object) {
  SnippetRequest_WalInfo* _this = reinterpret_cast< SnippetRequest_WalInfo* >(object);
  (void)_this;
}
void SnippetRequest_WalInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_WalInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_WalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.WalInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_key_.Clear();
  inserted_key_.Clear();
  inserted_value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_WalInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string deleted_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deleted_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.WalInfo.deleted_key"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string inserted_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inserted_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.WalInfo.inserted_key"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string inserted_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inserted_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.WalInfo.inserted_value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_WalInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.WalInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string deleted_key = 1;
  for (int i = 0, n = this->_internal_deleted_key_size(); i < n; i++) {
    const auto& s = this->_internal_deleted_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.WalInfo.deleted_key");
    target = stream->WriteString(1, s, target);
  }

  // repeated string inserted_key = 2;
  for (int i = 0, n = this->_internal_inserted_key_size(); i < n; i++) {
    const auto& s = this->_internal_inserted_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.WalInfo.inserted_key");
    target = stream->WriteString(2, s, target);
  }

  // repeated string inserted_value = 3;
  for (int i = 0, n = this->_internal_inserted_value_size(); i < n; i++) {
    const auto& s = this->_internal_inserted_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.WalInfo.inserted_value");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.WalInfo)
  return target;
}

size_t SnippetRequest_WalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.WalInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deleted_key = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deleted_key_.size());
  for (int i = 0, n = deleted_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deleted_key_.Get(i));
  }

  // repeated string inserted_key = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(inserted_key_.size());
  for (int i = 0, n = inserted_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      inserted_key_.Get(i));
  }

  // repeated string inserted_value = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(inserted_value_.size());
  for (int i = 0, n = inserted_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      inserted_value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_WalInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_WalInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_WalInfo::GetClassData() const { return &_class_data_; }

void SnippetRequest_WalInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_WalInfo *>(to)->MergeFrom(
      static_cast<const SnippetRequest_WalInfo &>(from));
}


void SnippetRequest_WalInfo::MergeFrom(const SnippetRequest_WalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.WalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  deleted_key_.MergeFrom(from.deleted_key_);
  inserted_key_.MergeFrom(from.inserted_key_);
  inserted_value_.MergeFrom(from.inserted_value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_WalInfo::CopyFrom(const SnippetRequest_WalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.WalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_WalInfo::IsInitialized() const {
  return true;
}

void SnippetRequest_WalInfo::InternalSwap(SnippetRequest_WalInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  deleted_key_.InternalSwap(&other->deleted_key_);
  inserted_key_.InternalSwap(&other->inserted_key_);
  inserted_value_.InternalSwap(&other->inserted_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_WalInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[13]);
}

// ===================================================================

class SnippetRequest_ResultInfo::_Internal {
 public:
};

SnippetRequest_ResultInfo::SnippetRequest_ResultInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_alias_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest.ResultInfo)
}
SnippetRequest_ResultInfo::SnippetRequest_ResultInfo(const SnippetRequest_ResultInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_alias_(from.column_alias_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_alias().empty()) {
    table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_alias(), 
      GetArenaForAllocation());
  }
  total_block_count_ = from.total_block_count_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest.ResultInfo)
}

inline void SnippetRequest_ResultInfo::SharedCtor() {
table_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
total_block_count_ = 0;
}

SnippetRequest_ResultInfo::~SnippetRequest_ResultInfo() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest.ResultInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest_ResultInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SnippetRequest_ResultInfo::ArenaDtor(void* object) {
  SnippetRequest_ResultInfo* _this = reinterpret_cast< SnippetRequest_ResultInfo* >(object);
  (void)_this;
}
void SnippetRequest_ResultInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest_ResultInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest_ResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest.ResultInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_alias_.Clear();
  table_alias_.ClearToEmpty();
  total_block_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest_ResultInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_alias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.ResultInfo.table_alias"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_alias();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.SnippetRequest.ResultInfo.column_alias"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 total_block_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          total_block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest_ResultInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest.ResultInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_alias = 1;
  if (!this->_internal_table_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_alias().data(), static_cast<int>(this->_internal_table_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.ResultInfo.table_alias");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_alias(), target);
  }

  // repeated string column_alias = 2;
  for (int i = 0, n = this->_internal_column_alias_size(); i < n; i++) {
    const auto& s = this->_internal_column_alias(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SnippetRequest.ResultInfo.column_alias");
    target = stream->WriteString(2, s, target);
  }

  // int32 total_block_count = 3;
  if (this->_internal_total_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_block_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest.ResultInfo)
  return target;
}

size_t SnippetRequest_ResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest.ResultInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_alias = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_alias_.size());
  for (int i = 0, n = column_alias_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_alias_.Get(i));
  }

  // string table_alias = 1;
  if (!this->_internal_table_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_alias());
  }

  // int32 total_block_count = 3;
  if (this->_internal_total_block_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total_block_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest_ResultInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest_ResultInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest_ResultInfo::GetClassData() const { return &_class_data_; }

void SnippetRequest_ResultInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest_ResultInfo *>(to)->MergeFrom(
      static_cast<const SnippetRequest_ResultInfo &>(from));
}


void SnippetRequest_ResultInfo::MergeFrom(const SnippetRequest_ResultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest.ResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  column_alias_.MergeFrom(from.column_alias_);
  if (!from._internal_table_alias().empty()) {
    _internal_set_table_alias(from._internal_table_alias());
  }
  if (from._internal_total_block_count() != 0) {
    _internal_set_total_block_count(from._internal_total_block_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest_ResultInfo::CopyFrom(const SnippetRequest_ResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest.ResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest_ResultInfo::IsInitialized() const {
  return true;
}

void SnippetRequest_ResultInfo::InternalSwap(SnippetRequest_ResultInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_alias_.InternalSwap(&other->column_alias_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_alias_, lhs_arena,
      &other->table_alias_, rhs_arena
  );
  swap(total_block_count_, other->total_block_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest_ResultInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[14]);
}

// ===================================================================

class SnippetRequest::_Internal {
 public:
  static const ::StorageEngineInstance::SnippetRequest_QueryInfo& query_info(const SnippetRequest* msg);
  static const ::StorageEngineInstance::SnippetRequest_SchemaInfo& schema_info(const SnippetRequest* msg);
  static const ::StorageEngineInstance::SnippetRequest_WalInfo& wal_info(const SnippetRequest* msg);
  static const ::StorageEngineInstance::SnippetRequest_ResultInfo& result_info(const SnippetRequest* msg);
};

const ::StorageEngineInstance::SnippetRequest_QueryInfo&
SnippetRequest::_Internal::query_info(const SnippetRequest* msg) {
  return *msg->query_info_;
}
const ::StorageEngineInstance::SnippetRequest_SchemaInfo&
SnippetRequest::_Internal::schema_info(const SnippetRequest* msg) {
  return *msg->schema_info_;
}
const ::StorageEngineInstance::SnippetRequest_WalInfo&
SnippetRequest::_Internal::wal_info(const SnippetRequest* msg) {
  return *msg->wal_info_;
}
const ::StorageEngineInstance::SnippetRequest_ResultInfo&
SnippetRequest::_Internal::result_info(const SnippetRequest* msg) {
  return *msg->result_info_;
}
SnippetRequest::SnippetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sst_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest)
}
SnippetRequest::SnippetRequest(const SnippetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sst_info_(from.sst_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_query_info()) {
    query_info_ = new ::StorageEngineInstance::SnippetRequest_QueryInfo(*from.query_info_);
  } else {
    query_info_ = nullptr;
  }
  if (from._internal_has_schema_info()) {
    schema_info_ = new ::StorageEngineInstance::SnippetRequest_SchemaInfo(*from.schema_info_);
  } else {
    schema_info_ = nullptr;
  }
  if (from._internal_has_wal_info()) {
    wal_info_ = new ::StorageEngineInstance::SnippetRequest_WalInfo(*from.wal_info_);
  } else {
    wal_info_ = nullptr;
  }
  if (from._internal_has_result_info()) {
    result_info_ = new ::StorageEngineInstance::SnippetRequest_ResultInfo(*from.result_info_);
  } else {
    result_info_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&work_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(work_id_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest)
}

inline void SnippetRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&query_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&work_id_) -
    reinterpret_cast<char*>(&query_info_)) + sizeof(work_id_));
}

SnippetRequest::~SnippetRequest() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete query_info_;
  if (this != internal_default_instance()) delete schema_info_;
  if (this != internal_default_instance()) delete wal_info_;
  if (this != internal_default_instance()) delete result_info_;
}

void SnippetRequest::ArenaDtor(void* object) {
  SnippetRequest* _this = reinterpret_cast< SnippetRequest* >(object);
  (void)_this;
}
void SnippetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_info_.Clear();
  if (GetArenaForAllocation() == nullptr && query_info_ != nullptr) {
    delete query_info_;
  }
  query_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && schema_info_ != nullptr) {
    delete schema_info_;
  }
  schema_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && wal_info_ != nullptr) {
    delete wal_info_;
  }
  wal_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_info_ != nullptr) {
    delete result_info_;
  }
  result_info_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(work_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::StorageEngineInstance::SnippetRequest_SnippetType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 query_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 work_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          work_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.QueryInfo query_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.SchemaInfo schema_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.SnippetRequest.SstInfo sst_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sst_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.WalInfo wal_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_wal_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.SnippetRequest.ResultInfo result_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 query_id = 2;
  if (this->_internal_query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_query_id(), target);
  }

  // int32 work_id = 3;
  if (this->_internal_work_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_work_id(), target);
  }

  // .StorageEngineInstance.SnippetRequest.QueryInfo query_info = 4;
  if (this->_internal_has_query_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::query_info(this), target, stream);
  }

  // .StorageEngineInstance.SnippetRequest.SchemaInfo schema_info = 5;
  if (this->_internal_has_schema_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::schema_info(this), target, stream);
  }

  // repeated .StorageEngineInstance.SnippetRequest.SstInfo sst_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sst_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_sst_info(i), target, stream);
  }

  // .StorageEngineInstance.SnippetRequest.WalInfo wal_info = 7;
  if (this->_internal_has_wal_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::wal_info(this), target, stream);
  }

  // .StorageEngineInstance.SnippetRequest.ResultInfo result_info = 8;
  if (this->_internal_has_result_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::result_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest)
  return target;
}

size_t SnippetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.SnippetRequest.SstInfo sst_info = 6;
  total_size += 1UL * this->_internal_sst_info_size();
  for (const auto& msg : this->sst_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .StorageEngineInstance.SnippetRequest.QueryInfo query_info = 4;
  if (this->_internal_has_query_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_info_);
  }

  // .StorageEngineInstance.SnippetRequest.SchemaInfo schema_info = 5;
  if (this->_internal_has_schema_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_info_);
  }

  // .StorageEngineInstance.SnippetRequest.WalInfo wal_info = 7;
  if (this->_internal_has_wal_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wal_info_);
  }

  // .StorageEngineInstance.SnippetRequest.ResultInfo result_info = 8;
  if (this->_internal_has_result_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_info_);
  }

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 query_id = 2;
  if (this->_internal_query_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_query_id());
  }

  // int32 work_id = 3;
  if (this->_internal_work_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_work_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest::GetClassData() const { return &_class_data_; }

void SnippetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest *>(to)->MergeFrom(
      static_cast<const SnippetRequest &>(from));
}


void SnippetRequest::MergeFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sst_info_.MergeFrom(from.sst_info_);
  if (from._internal_has_query_info()) {
    _internal_mutable_query_info()->::StorageEngineInstance::SnippetRequest_QueryInfo::MergeFrom(from._internal_query_info());
  }
  if (from._internal_has_schema_info()) {
    _internal_mutable_schema_info()->::StorageEngineInstance::SnippetRequest_SchemaInfo::MergeFrom(from._internal_schema_info());
  }
  if (from._internal_has_wal_info()) {
    _internal_mutable_wal_info()->::StorageEngineInstance::SnippetRequest_WalInfo::MergeFrom(from._internal_wal_info());
  }
  if (from._internal_has_result_info()) {
    _internal_mutable_result_info()->::StorageEngineInstance::SnippetRequest_ResultInfo::MergeFrom(from._internal_result_info());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from._internal_work_id() != 0) {
    _internal_set_work_id(from._internal_work_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest::CopyFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest::IsInitialized() const {
  return true;
}

void SnippetRequest::InternalSwap(SnippetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sst_info_.InternalSwap(&other->sst_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest, work_id_)
      + sizeof(SnippetRequest::work_id_)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest, query_info_)>(
          reinterpret_cast<char*>(&query_info_),
          reinterpret_cast<char*>(&other->query_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[15]);
}

// ===================================================================

class QueryStringResult::_Internal {
 public:
};

QueryStringResult::QueryStringResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.QueryStringResult)
}
QueryStringResult::QueryStringResult(const QueryStringResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query_result().empty()) {
    query_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_result(), 
      GetArenaForAllocation());
  }
  ::memcpy(&scanned_row_count_, &from.scanned_row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&filtered_row_count_) -
    reinterpret_cast<char*>(&scanned_row_count_)) + sizeof(filtered_row_count_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.QueryStringResult)
}

inline void QueryStringResult::SharedCtor() {
query_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scanned_row_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filtered_row_count_) -
    reinterpret_cast<char*>(&scanned_row_count_)) + sizeof(filtered_row_count_));
}

QueryStringResult::~QueryStringResult() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.QueryStringResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryStringResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  query_result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryStringResult::ArenaDtor(void* object) {
  QueryStringResult* _this = reinterpret_cast< QueryStringResult* >(object);
  (void)_this;
}
void QueryStringResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryStringResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryStringResult::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.QueryStringResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_result_.ClearToEmpty();
  ::memset(&scanned_row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filtered_row_count_) -
      reinterpret_cast<char*>(&scanned_row_count_)) + sizeof(filtered_row_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryStringResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.QueryStringResult.query_result"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scanned_row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          scanned_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 filtered_row_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          filtered_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryStringResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.QueryStringResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string query_result = 1;
  if (!this->_internal_query_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_result().data(), static_cast<int>(this->_internal_query_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.QueryStringResult.query_result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query_result(), target);
  }

  // int32 scanned_row_count = 2;
  if (this->_internal_scanned_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scanned_row_count(), target);
  }

  // int32 filtered_row_count = 3;
  if (this->_internal_filtered_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_filtered_row_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.QueryStringResult)
  return target;
}

size_t QueryStringResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.QueryStringResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query_result = 1;
  if (!this->_internal_query_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_result());
  }

  // int32 scanned_row_count = 2;
  if (this->_internal_scanned_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_scanned_row_count());
  }

  // int32 filtered_row_count = 3;
  if (this->_internal_filtered_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_filtered_row_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryStringResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryStringResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryStringResult::GetClassData() const { return &_class_data_; }

void QueryStringResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryStringResult *>(to)->MergeFrom(
      static_cast<const QueryStringResult &>(from));
}


void QueryStringResult::MergeFrom(const QueryStringResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.QueryStringResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query_result().empty()) {
    _internal_set_query_result(from._internal_query_result());
  }
  if (from._internal_scanned_row_count() != 0) {
    _internal_set_scanned_row_count(from._internal_scanned_row_count());
  }
  if (from._internal_filtered_row_count() != 0) {
    _internal_set_filtered_row_count(from._internal_filtered_row_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryStringResult::CopyFrom(const QueryStringResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.QueryStringResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStringResult::IsInitialized() const {
  return true;
}

void QueryStringResult::InternalSwap(QueryStringResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_result_, lhs_arena,
      &other->query_result_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryStringResult, filtered_row_count_)
      + sizeof(QueryStringResult::filtered_row_count_)
      - PROTOBUF_FIELD_OFFSET(QueryStringResult, scanned_row_count_)>(
          reinterpret_cast<char*>(&scanned_row_count_),
          reinterpret_cast<char*>(&other->scanned_row_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryStringResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_Filter_FilterValue* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_Filter_FilterValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_Filter_FilterValue >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_Filter* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_Projection* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_Projection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_Projection >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_Order* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_Dependency* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_Dependency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_Dependency >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_Limit* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_Limit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_Limit >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_Ref* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_Ref >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_Ref >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_QueryInfo* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_QueryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_QueryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_SchemaInfo_Column >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_SchemaInfo* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_SchemaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_SchemaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD_Block >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_SstInfo_CSD* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_SstInfo_CSD >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_SstInfo* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_SstInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_SstInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_WalInfo* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_WalInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_WalInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest_ResultInfo* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest_ResultInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest_ResultInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::QueryStringResult* Arena::CreateMaybeMessage< ::StorageEngineInstance::QueryStringResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::QueryStringResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
